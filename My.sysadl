Model SysADLArchitecture;
package SysADL.types {
	value type Int {
	}
	value type Boolean {
	}
	value type String {
	}
	value type Void {
	}
	value type Real {
	}
	
	datatype Presenca {
		attributes valor : Boolean
	id_sensor : Int
	}
	datatype Ticket {
		attributes codigo : CodBarras hora : Hora
	status : StatusTicket
	}
	value type CodBarras {
	}
	value type Hora {
	}
	enum Cores {
		Verde, Amarelo, Azul, Vermelho
	}
	
	
	enum AcoesCancela {
		Abrir, Fechar
	}
	datatype Relatorio {
	}
	datatype RelatorioFinanceiro extends Relatorio {
	}
	datatype RelatorioOcupacao extends Relatorio {
	}
datatype ValorPag {
		attributes Valor : Dinheiro
	id_ticket : Int
	}
	value type Dinheiro {
	}
	datatype ConfPag {
		attributes valor : Boolean
	id_ticket : Int
	}
enum TiposVaga {
		Normal, Idoso, Deficiente
	}
	
enum TipoRelatorio {
		RelatorioOcupacao, RelatorioFinanceiro
	}
	value type DateTime {
	}
	datatype Log {
	}
datatype ConfImpTicket {
		attributes id_impressora : Int
	valor : Boolean
	}
enum StatusTicket {
		Pago, Pendente
	}
	datatype ComandoCancela {
		attributes Acao : AcoesCancela id_cancela : Int
	}
datatype CorLed {
		attributes cor : Cores id_led : Int
	}
datatype Vaga {
		attributes id_vaga : Int tipo : TiposVaga ocupada : Boolean
	}
datatype LeitTicket {
		attributes codigo : CodBarras id_leitora : Int
	}
value type Any {
	}
}
Requirement AbrirCancelaEletronica ( 5.0 ) {
	text =
	"A cancela eletrônica deve abrir automaticamente após o motorista recolher o ticket impresso na entrada e no momento em que o motorista apresentar o ticket devidamente paga na saída do estacionamento"
derive "GerenciarEstacionamento.GerenciarEntradadeVeiculos";
}
Requirement DetectarVeivulo ( 4.0 ) {
	text =
	"Ao se se aproximar com o veículo da cancela eletrônica a presença do veículo deve ser detectada de forma automática."
derive "GerenciarEstacionamento.GerenciarEntradadeVeiculos";
}

Requirement GerenciarEstacionamento ( 0.0 ) {
	text =
	"tem como objetivo facilitar a busca de vagas disponíveis e proporcionar comodidade e praticidade a seus usuários"
	Requirement GerenciarVagas ( 01 ) {
	text = "O sistema deve monitorar cada uma das vagas do estacionamento e sinalizar o status da vaga por meio de lâmpadas, diferenciando as vagas destinadas a idosos e deficientes físicos das demais"
Requirement SinalizarStatusdaVaga ( 01.1 ) {
	text = "O status da vaga deve ser representado pela cor da lâmpada associada a ela, a cor vermelha indica que a vaga está ocupada, a cor verde indica que a vaga está disponível, a cor amarela indica que a vaga está disponível e que é destinada a idosos, a cor azul indica que a vaga está disponível e que é destinada à deficientes físicos."
}
	Requirement DetectarStatusdaVaga ( 01.2 ) {
	text = "O sistema deve detectar para cada vaga do estacionamento se existe ou não um veículo estacionado"
}
Requirement SinalizarQuantidadedeVagasDisponiveis ( 1.3 ) {
		text =
		"O sistema deve indicar em painéis a quantidade de vagas disponíveis em cada ala do estacionamento."
	}
}
	Requirement GerenciarEntradadeVeiculos ( 2.0 ) {
	text =
	"O sistema deve controlar a entrada de veículos por meio de uma cancela eletrônica. Um ticket com código de barras deve ser impresso para cada motorista antes de  o mesmo entrar no estacionamento."
	Requirement ImprimirTicket ( 2.1 ) {
		text =
		"Antes de o motorista entrar no estacionamento um ticket com código de barras deve ser impresso e recolhido pelo motorista. Associado ao código de barras impresso no ticket o sistema deve armazenar a hora em que o ticket foi gerado."
	}
}
	Requirement GerenciarSaidaVeiculos ( 3.0 ) {
	text =
	"O sistema deve gerenciar a saída de veículos por meio de uma cancela eletrônica. Os veículos poderão deixar o estacionamento apenas após o pagamento da taxa de estacionamento."
	Requirement LerTicket ( 3.1 ) {
		text =
		"A partir da leitura do código de barras impresso no ticket o sistema deve recuperar todas as informações associadas ao ticket (horário de entrada\r\nno estacionamento, valor da taxa de estacionamento,  se a taxa foi ou não paga, se foi paga o horário de pagamento )."
	}
}
	Requirement AbrirCancelaEmergencial ( 8.0 ) {
	text =
	"Em casos de emergência o operador do estacionamento poderá abrir a cancela de emergência."
}
Requirement GerarRelatorio ( 7.0 ) {
	text =
	"O sistema deve permitir ao gerente consultar a ocupação do estacionamento e gerar relatórios financeiros."
	Requirement GerarRelatorioFinanceiro ( 7.1 ) {
		text =
		"O sistema deve permitir ao gerente gerar relatórios que detalhem a arrecadação do estacionamento em períodos de tempo informados pelo gerente."
	}
	Requirement ConsultarOcupacao ( 7.2 ) {
		text =
		"O sistema deve permitir ao gerente consultar a ocupação do estacionamento por dia, hora, semana e mês."
	}
}
	Requirement GerenciarPagamento ( 6.0 ) {
	text =
	"O sistema deve permitir ao usuário realizar o pagamento da taxa de estacionamento. O pagamento deve ser calculado com base no tempo em que o veículo esteve no estacionamento."
	Requirement RealizarPagamento ( 6.1 ) {
		text =
		"O sistema deve permitir ao usuário realizar o pagamento em caixas automáticos com cartão ou dinheiro."
	}
}
}
package Components {
import Ports;
	import Connectors;
	import SysADL.types;
	component def ControladorCorCP {
	ports 
		Cor : Ports.CorLedOPT {
		}
	Vaga : Ports.VagaIPT {
		}
	}
	boundary component def SensorPresencaCP {
		ports Presenca : Ports.PresencaOPT {
		}
	}
	boundary component def LedVagaCP {
	ports Cor : Ports.CorLedIPT {
		}
	}
	component def GerenciadorEstacionamento {
		configuration {
			components:			
			GerenciadorVagaCP : GerenciadorVagaCP {
				using ports 
				
			}
			GerenciadorCancelaCP : GerenciadorCancelaCP {
				using ports Comando : Ports.ComandoCancelaIPT {
				}
			}
			EntradaCP : EntradaCP {
				using ports ConfImp : Ports.ConfImpTicketOPT {
				}
				Ticket : Ports.TicketOPT {
				}
			}
			SaidaCP : SaidaCP {
				using ports LeitTicket : Ports.CodigoTicketOPT {
				}
			}
			GerenciadorPagamentoCP : GerenciadorPagamentoCP {
				using ports ConfPag : Ports.ConfPagOPT {
				}
				CodTicket : Ports.CodigoTicketOPT {
				}
				Ticket : Ports.TicketIPT {
				}
			}
			GerenciadorRelatorioCP : GerenciadorRelatorioCP {
				using ports p21 : Ports.TipoRelatorioOPT {
				}
				p26 : Ports.LogUsoIPT {
				}
				DataFiltro : Ports.DataFiltroOPT {
				}
			}
			ControladorGeralCP : ControladorGeralCP {
				using ports CodTicket : Ports.CodigoTicketIPT {
				}
				TicketOut : Ports.TicketOPT {
				}
				TicketIn : Ports.TicketIPT {
				}
				ConfPag : Ports.ConfPagIPT {
				}
				LeitTicket : Ports.LeitTicketIPT {
				}
				ConfImp : Ports.ConfImpTicketIPT {
				}
				Comando : Ports.ComandoCancelaOPT {
				}
				TipoRelat : Ports.TipoRelatorioIPT {
				}
				DataFiltro : Ports.DataFiltroIPT {
				}
				Uso : Ports.LogUsoOPT {
				}
			}
			connectors:
			LeitTicket : Connectors.LeitTicketCNT bindings SaidaCP.LeitTicket =
			ControladorGeralCP.LeitTicket ConfImp : Connectors.ConfImpTicketCNT
			bindings EntradaCP.ConfImp = ControladorGeralCP.ConfImp Ticket :
			Connectors.TicketCNT bindings EntradaCP.Ticket =
			ControladorGeralCP.TicketIn Ticket : Connectors.TicketCNT bindings
			ControladorGeralCP.TicketOut = GerenciadorPagamentoCP.Ticket ConfPag :
			Connectors.ConfPagCNT bindings GerenciadorPagamentoCP.ConfPag =
			ControladorGeralCP.ConfPag CodTicket : Connectors.CodigoTicketCNT bindings
			GerenciadorPagamentoCP.CodTicket = ControladorGeralCP.CodTicket Comando :
			Connectors.ComCancelaCNT bindings ControladorGeralCP.Comando =
			GerenciadorCancelaCP.Comando DadosUso : Connectors.LogUsoCNT bindings
			ControladorGeralCP.Uso = GerenciadorRelatorioCP.p26 TipoRelat :
			Connectors.TipoRelatorioCNT bindings GerenciadorRelatorioCP.p21 =
			ControladorGeralCP.TipoRelat DataFiltro : Connectors.DataFiltroCNT bindings
			GerenciadorRelatorioCP.DataFiltro = ControladorGeralCP.DataFiltro
		}
	}
	boundary component def PainelLedCP {
		ports QtVagas : Ports.QtVagasIPT {
		}
	}
	boundary component def CancelaCP {
		ports Comando : Ports.ComandoCancelaIPT {
		}
	}
	boundary component def ImpressoraTicketCP {
		ports Presenca : Ports.PresencaIPT {
		}
		Ticket : Ports.TicketOPT {
		}
		
	ConfImp : Ports.ConfImpTicketOPT {
		}
	}
	boundary component def LeitorTicketCP {
		ports 
		LeitTicket : Ports.LeitTicketOPT {
		}
	}
	component def ValidadorPagamentoCP {
		ports ValorPago : Ports.ValorPagIPT {
		}
		
		ConfPag : Ports.ConfPagOPT {
		}
	ValorTicket : Ports.ValorPagIPT {
		}
	}
	component def CalculadorPrecoPagamentoCP {
		ports ValorTicket : Ports.ValorPagOPT {
		}
		Ticket : Ports.TicketIPT {
		}
	}
	component def SaidaCP {
		ports LeitTicket : Ports.LeitTicketOPT {
		}
		configuration {
			components:			
		
			LeitorTicketCP : LeitorTicketCP {
				using ports CodTicket : Ports.LeitTicketOPT {
				}
			}
			delegations:
			
		LeitorTicketCP.CodTicket to LeitTicket
		}
	}
	component def EntradaCP {
		ports ConfImp : Ports.ConfImpTicketOPT {
		}
		Ticket : Ports.TicketOPT {
		}
		
	configuration {
			components:			
		SensorPresenca : SensorPresencaCP {
				using ports Presenca : Ports.PresencaOPT {
				}
			}
			ImpressoraTicket : ImpressoraTicketCP {
				using ports Presenca : Ports.PresencaIPT {
				}
				Ticket : Ports.TicketOPT {
				}
				ConfImp : Ports.ConfImpTicketOPT {
				}
			}
		connectors:
			c1 : Connectors.PresencaCNT bindings SensorPresenca.Presenca =
			ImpressoraTicket.Presenca delegations:
			ImpressoraTicket.ConfImp to ConfImp
		ImpressoraTicket.Ticket to Ticket
		}
	}
	
	component def GerenciadorVagaCP {
		ports 
		
		configuration {
			components:
			
			PainelLedCP : PainelLedCP {
				using ports p18 : Ports.QtVagasIPT {
				}
			}
			
			
			
			
			
			VagaCP : VagaCP [ 1, 30 ] {
				using ports Cor : Ports.CorLedIPT {
				}
				Presenca : Ports.PresencaOPT {
				}
			}
			ControladorVagaCP : ControladorVagaCP {
				using ports Presenca : Ports.PresencaIPT {
				}
				QtVagasOut : Ports.QtVagasOPT {
				}
				Cor : Ports.CorLedOPT {
				}
				clientPT : Ports.ClientPT {
				}
			}
			BDVagaCP : BDVagaCP {
				using ports serverPT : Ports.ServerPT {
				}
			}
			connectors:
			ClientServer : Connectors.ClientServerCN bindings
			ControladorVagaCP.clientPT = BDVagaCP.serverPT qtVagas :
			Connectors.QtVagasCNT bindings ControladorVagaCP.QtVagasOut =
			PainelLedCP.p18 Presenca : Connectors.PresencaCNT bindings VagaCP.Presenca
			= ControladorVagaCP.Presenca Cor : Connectors.CorLedCNT bindings
			ControladorVagaCP.Cor = VagaCP.Cor
		}
	}
component def GerenciadorRelatorioCP {
		ports 
		TipoRelatorio : Ports.TipoRelatorioOPT {
		}
		Log : Ports.LogUsoIPT {
		}
		
	DataFiltro : Ports.DataFiltroOPT {
		}
		
		configuration {
			components:			
			InterfaceUsuarioRelatorioCP : InterfaceUsuarioRelatorioCP {
				using ports p21 : Ports.TipoRelatorioOPT {
				}
				DataFiltro : Ports.DataFiltroOPT {
				}
			}
			GeradorRelatorioCP : GeradorRelatorioCP {
				using ports p26 : Ports.LogUsoIPT {
				}
				
			}
			delegations:
			
			InterfaceUsuarioRelatorioCP.p21 to TipoRelatorio GeradorRelatorioCP.p26 to Log
		InterfaceUsuarioRelatorioCP.DataFiltro to Ports.DataFiltroOPT.data_inicioOPT
			InterfaceUsuarioRelatorioCP.DataFiltro to Ports.DataFiltroOPT.data_fimOPT
		}
	}
	boundary component def InterfaceUsuarioRelatorioCP {
		ports 
		
		
		TipoRelatorio : Ports.TipoRelatorioOPT {
		}
		
		
	DataFiltro : Ports.DataFiltroOPT {
		}
	Relatorio : Ports.RelatorioIPT {
		}
	}
	boundary component def GeradorRelatorioCP {
		ports Log : Ports.LogUsoIPT {
		}
		
	}

component def VagaCP {
		ports 
		Cor : Ports.CorLedIPT {
		}
		Presenca : Ports.PresencaOPT {
		}
		configuration {
			components:
			
			
			
		SensorPresencaCP : SensorPresencaCP {
				using ports Presenca : Ports.PresencaOPT {
				}
			}
			LedVagaCP : LedVagaCP {
				using ports Cor : Ports.CorLedIPT {
				}
			}
			delegations:
			  
		SensorPresencaCP.Presenca to Presenca LedVagaCP.Cor to Cor
		}
	}
	
	
	component def GerenciadorCancelaCP {
		ports Comando : Ports.ComandoCancelaIPT {
		}
		configuration {
			components:
			
			CancelaCP : CancelaCP {
				using ports p10 : Ports.ComandoCancelaIPT {
				}
			}
			connectors:
			
		delegations:
			CancelaCP.p10 to Comando
		}
	}
component def GerenciadorPagamentoCP {
		ports ConfPag : Ports.ConfPagOPT {
		}
		CodTicket : Ports.CodigoTicketOPT {
		}
		Ticket : Ports.TicketIPT {
		}
		configuration {
		components:
			CalculadorPrecoPagamentoCP : CalculadorPrecoPagamentoCP {
				using ports ValorTicket : Ports.ValorPagOPT {
				}
				Ticket : Ports.TicketIPT {
				}
			}
			
			CentralPagamentoCP : CentralPagamentoCP {
				using ports ConfPag : Ports.ConfPagOPT {
				}
				ValorTicket : Ports.ValorPagIPT {
				}
				CodTicket : Ports.CodigoTicketOPT {
				}
			}
			connectors:
			  ValorTicket : Connectors.ValorPagCNT bindings CalculadorPrecoPagamentoCP.ValorTicket =
			CentralPagamentoCP.ValorTicket delegations:
			CalculadorPrecoPagamentoCP.Ticket to Ticket CentralPagamentoCP.CodTicket to CodTicket
			CentralPagamentoCP.ConfPag to ConfPag
		}
	}
component def CentralPagamentoCP {
		ports 
		ConfPag : Ports.ConfPagOPT {
		}
		ValorTicket : Ports.ValorPagIPT {
		}
		p29 : Ports.CodigoTicketOPT {
		}
		configuration {
			components:
			
			
			
			
			ValidadorPagamentoCP : ValidadorPagamentoCP {
				using ports ValorPago : Ports.ValorPagIPT {
				}
				ConfPag : Ports.ConfPagOPT {
				}
				ValorTicket : Ports.ValorPagIPT {
				}
			}
			
			CaixaPagamentoCP : CaixaPagamentoCP {
				using ports ValorPago : Ports.ValorPagOPT {
				}
				CodTicket : Ports.CodigoTicketOPT {
				}
			}
			connectors:
			ValorPago : Connectors.ValorPagCNT bindings CaixaPagamentoCP.ValorPago =
			ValidadorPagamentoCP.ValorPago delegations:
			
		ValidadorPagamentoCP.ValorTicket to ValorTicket ValidadorPagamentoCP.ConfPag
			to ConfPag
		CaixaPagamentoCP.CodTicket to p29
		}
	}
	

component def ControladorGeralCP {
		ports CodTicket : Ports.CodigoTicketIPT {
		}
		TicketOut : Ports.TicketOPT {
		}
		TicketIn : Ports.TicketIPT {
		}
		ConfPag : Ports.ConfPagIPT {
		}
	
	LeitTicket : Ports.LeitTicketIPT {
		}
		ConfImp : Ports.ConfImpTicketIPT {
		}
		Comando : Ports.ComandoCancelaOPT {
		}
		TipoRelat : Ports.TipoRelatorioIPT {
		}
		DataFiltro : Ports.DataFiltroIPT {
		}
		Log : Ports.LogUsoOPT {
		}
		configuration {
			components:
			
			
			
			
		
			
			
			
			ControladorTicketCP : ControladorTicketCP {
				using ports TicketIn : Ports.TicketIPT {
				}
				CodTicket : Ports.CodigoTicketIPT {
				}
				TicketOut : Ports.TicketOPT {
				}
				ConfPag : Ports.ConfPagIPT {
				}
				ClientPT : Ports.ClientPT {
				}
			}
			ControladorCancelaCP : ControladorCancelaCP {
				using ports ConfImp : Ports.ConfImpTicketIPT {
				}
				LeitTicket : Ports.LeitTicketIPT {
				}
				Comando : Ports.ComandoCancelaOPT {
				}
				ClientPT : Ports.ClientPT {
				}
			}
			ControladorRelatorioCP : ControladorRelatorioCP {
				using ports DataFiltro : Ports.DataFiltroIPT {
				}
				TipoRelat : Ports.TipoRelatorioIPT {
				}
				Log : Ports.LogUsoOPT {
				}
				ClientPT : Ports.ClientPT {
				}
			}
			BDTicketCP : BDTicketCP {
				using ports ServerPT : Ports.ServerPT {
				}
			}
			connectors:
			ClientPT : Connectors.ClientServerCN bindings
			ControladorRelatorioCP.ClientPT = BDTicketCP.ServerPT ClientPT :
			Connectors.ClientServerCN bindings ControladorCancelaCP.ClientPT =
			BDTicketCP.ServerPT ClientPT : Connectors.ClientServerCN bindings
			ControladorTicketCP.ClientPT = BDTicketCP.ServerPT delegations:
			ControladorRelatorioCP.DataFiltro to DataFiltro
			ControladorRelatorioCP.TipoRelat to TipoRelat ControladorRelatorioCP.Log to
			Log ControladorTicketCP.TicketIn to TicketIn ControladorTicketCP.ConfPag to
			ConfPag ControladorTicketCP.TicketOut to TicketOut
			ControladorTicketCP.CodTicket to CodTicket ControladorCancelaCP.Comando to
			Comando ControladorCancelaCP.LeitTicket to LeitTicket
			ControladorCancelaCP.ConfImp to ConfImp
		}
	}
	component def CaixaPagamentoCP {
		ports ValorPago : Ports.ValorPagOPT {
		}
		CodTicket : Ports.CodigoTicketOPT {
		}
		configuration {
			components:
			ReceptorCartaoCP : ReceptorCartaoCP {
				using ports ValorPago : Ports.ValorPagOPT {
				}
			}
			ReceptorDinheiroCP : ReceptorDinheiroCP {
				using ports ValorPago : Ports.ValorPagOPT {
				}
			}
			ScannerTicketCP : ScannerTicketCP {
				using ports CodTicket : Ports.CodigoTicketOPT {
				}
			}
			delegations:
			ReceptorCartaoCP.ValorPago to ValorPago ReceptorDinheiroCP.ValorPago to
			ValorPago
		ScannerTicketCP.CodTicket to CodTicket
		}
	}
	boundary component def ReceptorDinheiroCP {
		ports ValorPago : Ports.ValorPagOPT {
		}
	}
	boundary component def ReceptorCartaoCP {
		ports ValorPago : Ports.ValorPagOPT {
		}
	}
	boundary component def BDTicketCP {
	ports ServerPT : Ports.ServerPT {
		}
	}
	boundary component def BDVagaCP {
	ports 
		
	ServerPT : Ports.ServerPT {
		}
	}
	component def ControladorCancelaCP {
	ports ConfImp : Ports.ConfImpTicketIPT {
		}
		LeitTicket : Ports.LeitTicketIPT {
		}
		Comando : Ports.ComandoCancelaOPT {
		}
	ClientPT : Ports.ClientPT {
		}
	configuration {
			components:
			ControladorCancelaEntradaCP : ControladorCancelaEntradaCP {
				using ports ConfImp : Ports.ConfImpTicketIPT {
				}
				Comando : Ports.ComandoCancelaOPT {
				}
			}
			ControladorCancelaSaidaCP : ControladorCancelaSaidaCP {
				using ports LeitTicket : Ports.LeitTicketIPT {
				}
				Comando : Ports.ComandoCancelaOPT {
				}
				ClientPT : Ports.ClientPT {
				}
			}
			delegations:
			ControladorCancelaSaidaCP.ClientPT to ClientPT
			ControladorCancelaSaidaCP.LeitTicket to LeitTicket
			ControladorCancelaEntradaCP.ConfImp to ConfImp
			ControladorCancelaEntradaCP.Comando to Comando
			ControladorCancelaSaidaCP.Comando to Comando
		}
	}
	component def ControladorRelatorioCP {
	ports DataFiltro : Ports.DataFiltroIPT {
		}
		TipoRelat : Ports.TipoRelatorioIPT {
		}
		Log : Ports.LogUsoOPT {
		}
	ClientPT : Ports.ClientPT {
		}
	configuration {
		components:
			QueryFiltroCP : QueryFiltroCP {
				using ports TipoRelat : Ports.TipoRelatorioIPT {
				}
				DataFiltro : Ports.DataFiltroIPT {
				}
				Query : Ports.QueryOPT {
				}
			}
			AnswerLogCP : AnswerLogCP {
				using ports Answer : Ports.AnswerIPT {
				}
				Log : Ports.LogUsoOPT {
				}
			}
			delegations:
			QueryFiltroCP.DataFiltro to DataFiltro QueryFiltroCP.TipoRelat to TipoRelat
			QueryFiltroCP.Query to Ports.ClientPT.QueryOUT AnswerLogCP.Log to Log
			AnswerLogCP.Answer to Ports.ClientPT.AnswerIN
		}
	}
boundary component def ScannerTicketCP {
		ports CodTicket : Ports.CodigoTicketOPT {
		}
	}
	component def ControladorVagaCP {
		ports Presenca : Ports.PresencaIPT {
		}
		
		QtVagasOut : Ports.QtVagasOPT {
		}
		
		
		
		CorOut : Ports.CorLedOPT {
		}
	ClientPT : Ports.ClientPT {
		}
		configuration {
			components:
			ControladorCorCP : ControladorCorCP {
				using ports Cor : Ports.CorLedOPT {
				}
				Vaga : Ports.VagaIPT {
				}
			}
			ControladorPresencaCP : ControladorPresencaCP {
				using ports Presenca : Ports.PresencaIPT {
				}
				ClientPT : Ports.ClientPT {
				}
				Vaga : Ports.VagaOPT {
				}
				AttPainel : Ports.BooleanOPT {
				}
			}
			ControladorPainelCP : ControladorPainelCP {
				using ports AttPainel : Ports.BooleanIPT {
				}
				ClientPT : Ports.ClientPT {
				}
				QtVagas : Ports.QtVagasOPT {
				}
			}
			connectors:
			Vaga : Connectors.VagaCNT bindings ControladorPresencaCP.Vaga =
			ControladorCorCP.Vaga AttPainel : Connectors.BooleanCNT bindings
			ControladorPresencaCP.AttPainel = ControladorPainelCP.AttPainel
			delegations:
			ControladorCorCP.Cor to CorOut ControladorPresencaCP.Presenca to Presenca
			ControladorPainelCP.QtVagas to QtVagasOut ControladorPainelCP.ClientPT to
			ClientPT ControladorPresencaCP.ClientPT to ClientPT
		}
	}
	ConstraintDef CorFromVagaEQ {
		paramIn {
			Vaga : SysADL.types.Vaga
		}
		paramOut {
			Cor : SysADL.types.CorLed
		}
		equation "(Vaga.ocupada == False -> (Cor.cor = Cores::Vermelho)) | (Vaga.ocupada == True -> ((Vaga.tipo == TipoVaga::Normal -> (Cor.cor = Cores::Verde)) | (Vaga.tipo == TipoVaga::Deficiente -> (Cor.cor = Cores::Amarelo)) | (Vaga.tipo == TipoVaga::Idoso -> (Cor.cor = Cores::Azul))))"
	}
	
	
	
	activity def CalculadorPrecoPagamentoAC {
		inParameters {
			Ticket : SysADL.types.Ticket
		}
		outParameters {
			ValorTicket : SysADL.types.ValorPag
		}
		acbody body {
			actions : ActionUse CalcularValor {
				definition CalcularValorAN pinIn {
					Ticket : SysADL.types.Ticket
				}
			}
			delegate Ticket to "CalcularValor.Ticket" delegate ValorTicket to
			CalcularValor
		}
	}
	action def CalcularValorAN ( Ticket : SysADL.types.Ticket ) :
	SysADL.types.ValorPag {
		postCondition PrecoTicketEQ ( )
	delegate Ticket to "PrecoTicketEQ.Ticket"
	}
	ConstraintDef PrecoTicketEQ {
		paramIn {
			Ticket : SysADL.types.Ticket
		}
		paramOut {
			ValorTicket : SysADL.types.ValorPag
		}
		equation "(ticket.status == StatusTicket::Pendente -> (ValorTicket.valor = 10))"
	}
	activity def ValidadorPrecoPagamentoAC {
		inParameters {
			ValorTicket : SysADL.types.ValorPag, ValorPago : SysADL.types.ValorPag
		}
		outParameters {
			ConfPag : SysADL.types.ConfPag
		}
		acbody body {
			actions : ActionUse VerificarPagamento {
				definition VerificarPagamentoAN pinIn {
					ValorPago : SysADL.types.ValorPag, ValorTicket : SysADL.types.ValorPag
				}
			}
			delegate ValorTicket to "VerificarPagamento.ValorTicket" delegate ValorPago
			to "VerificarPagamento.ValorPago" delegate ConfPag to VerificarPagamento
		}
	}
	action def VerificarPagamentoAN ( ValorTicket : SysADL.types.ValorPag,
	ValorPago : SysADL.types.ValorPag ) : SysADL.types.ConfPag {
		postCondition PagIgualTicketEQ ( )
	delegate ValorTicket to "PagIgualTicketEQ.ValorTicket" delegate ValorPago to
		"PagIgualTicketEQ.ValorPago"
	}
	ConstraintDef PagIgualTicketEQ {
		paramIn {
			ValorTicket : SysADL.types.ValorPag, ValorPago : SysADL.types.ValorPag
		}
		paramOut {
			ConfPag : SysADL.types.ConfPag
		}
		equation "(ValorTicket.valor == ValorPago.valor -> (ConfPag.valor = True && ConfPag.id_ticket = ValorTicket.id_ticket))"
	}
component def ControladorTicketCP {
		ports TicketIn : Ports.TicketIPT {
		}
		CodTicket : Ports.CodigoTicketIPT {
		}
		TicketOut : Ports.TicketOPT {
		}
		ConfPag : Ports.ConfPagIPT {
		}
	ClientPT : Ports.ClientPT {
		}
	configuration {
			components:
			RegatadorTicketCP : RegatadorTicketCP {
				using ports CodTicket : Ports.CodigoTicketIPT {
				}
				ClientPT : Ports.ClientPT {
				}
				TicketOut : Ports.TicketOPT {
				}
			}
			RegistradorTicketCP : RegistradorTicketCP {
				using ports TicketIn : Ports.TicketIPT {
				}
				ClientPT : Ports.ClientPT {
				}
			}
			QuitadorTicketCP : QuitadorTicketCP {
				using ports ConfPag : Ports.ConfPagIPT {
				}
				ClientPT : Ports.ClientPT {
				}
			}
			delegations:
			QuitadorTicketCP.ClientPT to ClientPT RegatadorTicketCP.ClientPT to
			ClientPT RegistradorTicketCP.ClientPT to ClientPT
			RegistradorTicketCP.TicketIn to TicketIn QuitadorTicketCP.ConfPag to
			ConfPag RegatadorTicketCP.TicketOut to TicketOut
			RegatadorTicketCP.CodTicket to CodTicket
		}
	}
	component def ControladorPresencaCP {
		ports Presenca : Ports.PresencaIPT {
		}
		ClientPT : Ports.ClientPT {
		}
		Vaga : Ports.VagaOPT {
		}
		AttPainel : Ports.BooleanOPT {
		}
	configuration {
			components:
			AnswerVagaCP : AnswerVagaCP {
				using ports Answer : Ports.AnswerIPT {
				}
				Vaga : Ports.VagaOPT {
				}
			}
			QueryPresencaCP : QueryPresencaCP {
				using ports Presenca : Ports.PresencaIPT {
				}
				Query : Ports.QueryOPT {
				}
			}
			TriggerAttPainelCP : TriggerAttPainelCP {
				using ports Vaga : Ports.VagaIPT {
				}
				AttPainel : Ports.BooleanOPT {
				}
			}
			connectors:
			Vaga : Connectors.VagaCNT bindings AnswerVagaCP.Vaga =
			TriggerAttPainelCP.Vaga delegations:
			QueryPresencaCP.Presenca to Presenca QueryPresencaCP.Query to
			Ports.ClientPT.QueryOUT AnswerVagaCP.Answer to Ports.ClientPT.AnswerIN
			AnswerVagaCP.Vaga to Vaga TriggerAttPainelCP.AttPainel to AttPainel
		}
	}
	component def ControladorPainelCP {
		ports AttPainel : Ports.BooleanIPT {
		}
		ClientPT : Ports.ClientPT {
		}
		QtVagas : Ports.QtVagasOPT {
		}
	configuration {
			components:
			AnswerQtVagasCP : AnswerQtVagasCP {
				using ports QtVagas : Ports.QtVagasOPT {
				}
				Answer : Ports.AnswerIPT {
				}
			}
			QueryQtVagasCP : QueryQtVagasCP {
				using ports AttPainel : Ports.BooleanIPT {
				}
				Query : Ports.QueryOPT {
				}
			}
			delegations:
			AnswerQtVagasCP.Answer to Ports.ClientPT.AnswerIN AnswerQtVagasCP.QtVagas
			to QtVagas QueryQtVagasCP.AttPainel to AttPainel QueryQtVagasCP.Query to
			Ports.ClientPT.QueryOUT
		}
	}
	activity def ControladorCorAC {
		inParameters {
			Vaga : SysADL.types.Vaga
		}
		outParameters {
			Cor : SysADL.types.CorLed
		}
		acbody body {
			actions : ActionUse EscolherCorAN {
				definition EscolherCorAN pinIn {
					Vaga : SysADL.types.Vaga
				}
			}
			delegate Vaga to "EscolherCorAN.Vaga" delegate Cor to EscolherCorAN
		}
	}
	action def EscolherCorAN ( Vaga : SysADL.types.Vaga ) : SysADL.types.CorLed {
		postCondition CorFromVagaEQ ( )
	delegate Vaga to "CorFromVagaEQ.Vaga"
	}
ConstraintDef TriggerPainelEQ {
		paramIn {
			Vaga : SysADL.types.Vaga
		}
		paramOut {
			AttPainel : SysADL.types.Boolean
		}
		equation "(AttPainel = True)"
	}
component def ControladorCancelaEntradaCP {
		ports ConfImp : Ports.ConfImpTicketIPT {
		}
		Comando : Ports.ComandoCancelaOPT {
		}
	}
	component def ControladorCancelaSaidaCP {
		ports LeitTicket : Ports.LeitTicketIPT {
		}
		Comando : Ports.ComandoCancelaOPT {
		}
		ClientPT : Ports.ClientPT {
		}
	configuration {
			components:
			QueryLeitTicketCP : QueryLeitTicketCP {
				using ports LeitTicket : Ports.LeitTicketIPT {
				}
				Query : Ports.QueryOPT {
				}
			}
			AnswerTicketCP : AnswerTicketCP {
				using ports Answer : Ports.AnswerIPT {
				}
				Ticket : Ports.TicketOPT {
				}
			}
			ValidadorTicketPagoCP : ValidadorTicketPagoCP {
				using ports Ticket : Ports.TicketIPT {
				}
				Comando : Ports.ComandoCancelaOPT {
				}
				LeitTicket : Ports.LeitTicketIPT {
				}
			}
			connectors:
			Ticket : Connectors.TicketCNT bindings AnswerTicketCP.Ticket =
			ValidadorTicketPagoCP.Ticket delegations:
			QueryLeitTicketCP.LeitTicket to LeitTicket QueryLeitTicketCP.Query to
			Ports.ClientPT.QueryOUT AnswerTicketCP.Answer to Ports.ClientPT.AnswerIN
			ValidadorTicketPagoCP.Comando to Comando ValidadorTicketPagoCP.LeitTicket
			to LeitTicket
		}
	}
	activity def ControlarCancelaEntradaAC {
		inParameters {
			ConfImp : SysADL.types.ConfImpTicket
		}
		outParameters {
			Comando : SysADL.types.ComandoCancela
		}
		acbody body {
			actions : ActionUse AbrirCancelaEntradaAN {
				definition AbrirCancelaEntradaAN pinIn {
					ConfImp : SysADL.types.ConfImpTicket
				}
			}
			delegate ConfImp to "AbrirCancelaEntradaAN.ConfImp" delegate Comando to
			AbrirCancelaEntradaAN
		}
	}
	action def AbrirCancelaEntradaAN ( ConfImp : SysADL.types.ConfImpTicket ) :
	SysADL.types.ComandoCancela {
		postCondition CmdCancelaFromImpTicketEQ ( ) delegate ConfImp to
		"CmdCancelaFromImpTicketEQ.ConfImp"
	}
	ConstraintDef CmdCancelaFromImpTicketEQ {
		paramIn {
			ConfImp : SysADL.types.ConfImpTicket
		}
		paramOut {
			Comando : SysADL.types.ComandoCancela
		}
		equation
		"(ConfImp.valor == True -> (Comando.id_cancela = ConfImp.id_impressora && Comando.Acao = AcoesCancela::Abrir))"
	}
	component def QuitadorTicketCP {
		ports ConfPag : Ports.ConfPagIPT {
		}
		ClientPT : Ports.ClientPT {
		}
	configuration {
			components:
			QueryConfPagCP : QueryConfPagCP {
				using ports ConfPag : Ports.ConfPagIPT {
				}
				Query : Ports.QueryOPT {
				}
			}
			delegations:
			QueryConfPagCP.Query to Ports.ClientPT.QueryOUT QueryConfPagCP.ConfPag to
			ConfPag
		}
	}
	component def RegistradorTicketCP {
		ports TicketIn : Ports.TicketIPT {
		}
		ClientPT : Ports.ClientPT {
		}
	configuration {
			components:
			QueryTicketCP : QueryTicketCP {
				using ports Ticket : Ports.TicketIPT {
				}
				Query : Ports.QueryOPT {
				}
			}
			delegations:
			QueryTicketCP.Ticket to TicketIn QueryTicketCP.Query to
			Ports.ClientPT.QueryOUT
		}
	}
	component def RegatadorTicketCP {
		ports CodTicket : Ports.CodigoTicketIPT {
		}
		ClientPT : Ports.ClientPT {
		}
		TicketOut : Ports.TicketOPT {
		}
	configuration {
			components:
			QueryCodTicketCP : QueryCodTicketCP {
				using ports CodTicket : Ports.CodigoTicketIPT {
				}
				Query : Ports.QueryOPT {
				}
			}
			AnswerTicketCP : AnswerTicketCP {
				using ports Answer : Ports.AnswerIPT {
				}
				Ticket : Ports.TicketOPT {
				}
			}
			delegations:
			AnswerTicketCP.Answer to Ports.ClientPT.AnswerIN QueryCodTicketCP.Query to
			Ports.ClientPT.QueryOUT QueryCodTicketCP.CodTicket to CodTicket
			AnswerTicketCP.Ticket to TicketOut
		}
	}
	component def QueryPresencaCP {
		ports Presenca : Ports.PresencaIPT {
		}
		Query : Ports.QueryOPT {
		}
	}
	component def AnswerVagaCP {
		ports Answer : Ports.AnswerIPT {
		}
		Vaga : Ports.VagaOPT {
		}
	}
	component def TriggerAttPainelCP {
		ports Vaga : Ports.VagaIPT {
		}
		AttPainel : Ports.BooleanOPT {
		}
	}
	component def QueryQtVagasCP {
		ports AttPainel : Ports.BooleanIPT {
		}
		Query : Ports.QueryOPT {
		}
	}
	component def AnswerQtVagasCP {
		ports QtVagas : Ports.QtVagasOPT {
		}
		Answer : Ports.AnswerIPT {
		}
	}
	activity def QueryPresencaAC {
		inParameters {
			Presenca : SysADL.types.Presenca
		}
		outParameters {
			Query : SysADL.types.Any
		}
		acbody body {
			actions : ActionUse ConstruirQueryVagaAN {
				definition ConstruirQueryVagaAN pinIn {
					Presenca : SysADL.types.Presenca
				}
			}
			delegate Presenca to "ConstruirQueryVagaAN.Presenca" delegate Query to
			ConstruirQueryVagaAN
		}
	}
	activity def AnswerVagaAC {
		inParameters {
			Answer : SysADL.types.Any
		}
		outParameters {
			Vaga : SysADL.types.Vaga
		}
		acbody body {
			actions : ActionUse ConstruirVagaAnswerAN {
				definition ConstruirVagaAnswerAN pinIn {
					Answer : SysADL.types.Any
				}
			}
			delegate Answer to "ConstruirVagaAnswerAN.Answer" delegate Vaga to
			ConstruirVagaAnswerAN
		}
	}
	activity def TriggerAttPainelAC {
		inParameters {
			Vaga : SysADL.types.Vaga
		}
		outParameters {
			AttPainel : SysADL.types.Boolean
		}
		acbody body {
			actions : ActionUse EnviarTriggerAN {
				definition EnviarTriggerAN pinIn {
					Vaga : SysADL.types.Vaga
				}
			}
			delegate Vaga to "EnviarTriggerAN.Vaga" delegate AttPainel to
			EnviarTriggerAN
		}
	}
	action def ConstruirQueryVagaAN ( Presenca : SysADL.types.Presenca ) :
	SysADL.types.Any {
	}
	action def ConstruirVagaAnswerAN ( Answer : SysADL.types.Any ) :
	SysADL.types.Vaga {
	}
	action def EnviarTriggerAN ( Vaga : SysADL.types.Vaga ) :
	SysADL.types.Boolean {
		postCondition TriggerPainelEQ ( ) delegate Vaga to "TriggerPainelEQ.Vaga"
	}
	activity def QueryQtVagasAC {
		inParameters {
			AttPainel : SysADL.types.Boolean
		}
		outParameters {
			Query : SysADL.types.Any
		}
		acbody body {
			actions : ActionUse ContruirQueryQtVagasAN {
				definition ConstruirQueryQtVagasAN pinIn {
					AttPainel : SysADL.types.Boolean
				}
			}
			delegate AttPainel to "ContruirQueryQtVagasAN.AttPainel" delegate Query to
			ContruirQueryQtVagasAN
		}
	}
	activity def AnswerQtVagasAC {
		inParameters {
			Answer : SysADL.types.Any
		}
		outParameters {
			QtVagas : SysADL.types.Int
		}
		acbody body {
			actions : ActionUse ConstruirQtVagasAnswerAN {
				definition ConstruirQtVagasAnswerAN pinIn {
					Answer : SysADL.types.Any
				}
			}
			delegate Answer to "ConstruirQtVagasAnswerAN.Answer" delegate QtVagas to
			ConstruirQtVagasAnswerAN
		}
	}
	action def ConstruirQueryQtVagasAN ( AttPainel : SysADL.types.Boolean ) :
	SysADL.types.Any {
	}
	action def ConstruirQtVagasAnswerAN ( Answer : SysADL.types.Any ) :
	SysADL.types.Int {
	}
component def QueryLeitTicketCP {
		ports LeitTicket : Ports.LeitTicketIPT {
		}
		Query : Ports.QueryOPT {
		}
	}
	component def AnswerTicketCP {
		ports Answer : Ports.AnswerIPT {
		}
		Ticket : Ports.TicketOPT {
		}
	}
	component def ValidadorTicketPagoCP {
		ports Ticket : Ports.TicketIPT {
		}
		Comando : Ports.ComandoCancelaOPT {
		}
		LeitTicket : Ports.LeitTicketIPT {
		}
	}
	activity def QueryLeitTicketAC {
		inParameters {
			LeitTicket : SysADL.types.LeitTicket
		}
		outParameters {
			Query : SysADL.types.Any
		}
		acbody body {
			actions : ActionUse ConstruirQueryTicketLeitAN {
				definition ConstruirQueryTicketLeitAN pinIn {
					LeitTicket : SysADL.types.LeitTicket
				}
			}
			delegate LeitTicket to "ConstruirQueryTicketLeitAN.LeitTicket" delegate
			Query to ConstruirQueryTicketLeitAN
		}
	}
	action def ConstruirQueryTicketLeitAN ( LeitTicket : SysADL.types.LeitTicket
	) : SysADL.types.Any {
	}
	activity def AnswerTicketAC {
		inParameters {
			Answer : SysADL.types.Any
		}
		outParameters {
			Ticket : SysADL.types.Ticket
		}
		acbody body {
			actions : ActionUse ConstruirTicketAnswerAN {
				definition ConstruirTicketAnswerAN pinIn {
					Answer : SysADL.types.Any
				}
			}
			delegate Answer to "ConstruirTicketAnswerAN.Answer" delegate Ticket to
			ConstruirTicketAnswerAN
		}
	}
	action def ConstruirTicketAnswerAN ( Answer : SysADL.types.Any ) :
	SysADL.types.Ticket {
	}
	activity def ValidadorTicketPagoAC {
		inParameters {
			Ticket : SysADL.types.Ticket, LeitTicket : SysADL.types.LeitTicket
		}
		outParameters {
			Comando : SysADL.types.ComandoCancela
		}
		acbody body {
			actions : ActionUse AbrirCancelaSaidaAN {
				definition AbrirCancelaSaidaAN pinIn {
					Ticket : SysADL.types.Ticket
				}
			}
			delegate Ticket to "AbrirCancelaSaidaAN.Ticket" delegate Comando to
			AbrirCancelaSaidaAN
		}
	}
	action def AbrirCancelaSaidaAN ( Ticket : SysADL.types.Ticket, LeitTicket :
	SysADL.types.LeitTicket ) : SysADL.types.ComandoCancela {
		postCondition CmdCancelaFromTicketPagoEQ ( ) delegate Ticket to
		"CmdCancelaFromTicketPagoEQ.Ticket" delegate LeitTicket to
		"CmdCancelaFromTicketPagoEQ.LeitTicket"
	}
	ConstraintDef CmdCancelaFromTicketPagoEQ {
		paramIn {
			Ticket : SysADL.types.Ticket, LeitTicket : SysADL.types.LeitTicket
		}
		paramOut {
			Comando : SysADL.types.ComandoCancela
		}
		equation
		"(Ticket.status == StatusTicket::Pago -> (Comando.id_cancela = LeitTicket.id_leitora && Comando.acao = AcoesCancela::Abrir))"
	}
	component def QueryCodTicketCP {
		ports CodTicket : Ports.CodigoTicketIPT {
		}
		Query : Ports.QueryOPT {
		}
	}
	component def QueryTicketCP {
		ports Ticket : Ports.TicketIPT {
		}
		Query : Ports.QueryOPT {
		}
	}
	component def QueryConfPagCP {
		ports ConfPag : Ports.ConfPagIPT {
		}
		Query : Ports.QueryOPT {
		}
	}
	activity def QueryCodTicketAC {
		inParameters {
			CodBarras : SysADL.types.CodBarras
		}
		outParameters {
			Query : SysADL.types.Any
		}
		acbody body {
			actions : ActionUse ConstruirQueryTicketCodAN {
				definition ConstruirQueryTicketCodAN pinIn {
					CodBarras : SysADL.types.CodBarras
				}
			}
			delegate CodBarras to "ConstruirQueryTicketCodAN.CodBarras" delegate Query
			to ConstruirQueryTicketCodAN
		}
	}
	activity def QueryConfPagAC {
		inParameters {
			ConfPag : SysADL.types.ConfPag
		}
		outParameters {
			Query : SysADL.types.Any
		}
		acbody body {
			actions : ActionUse ConstruirQueryAlterarTicketAN {
				definition ConstruirQueryAlterarTicketAN pinIn {
					ConfPag : SysADL.types.ConfPag
				}
			}
			delegate Query to ConstruirQueryAlterarTicketAN delegate ConfPag to
			"ConstruirQueryAlterarTicketAN.ConfPag"
		}
	}
	activity def QueryTicketAC {
		inParameters {
			Ticket : SysADL.types.Ticket
		}
		outParameters {
			Query : SysADL.types.Any
		}
		acbody body {
			actions : ActionUse ConstruirQuerySalvarTicketAN {
				definition ConstruirQuerySalvarTicketAN pinIn {
					Ticket : SysADL.types.Ticket
				}
			}
			delegate Ticket to "ConstruirQuerySalvarTicketAN.Ticket" delegate Query to
			ConstruirQuerySalvarTicketAN
		}
	}
	action def ConstruirQueryTicketCodAN ( CodBarras : SysADL.types.CodBarras ) :
	SysADL.types.Any {
	}
	action def ConstruirQuerySalvarTicketAN ( Ticket : SysADL.types.Ticket ) :
	SysADL.types.Any {
	}
	action def ConstruirQueryAlterarTicketAN ( ConfPag : SysADL.types.ConfPag ) :
	SysADL.types.Any {
	}
	component def QueryFiltroCP {
		ports TipoRelat : Ports.TipoRelatorioIPT {
		}
		DataFiltro : Ports.DataFiltroIPT {
		}
		Query : Ports.QueryOPT {
		}
	}
	component def AnswerLogCP {
		ports Answer : Ports.AnswerIPT {
		}
		Log : Ports.LogUsoOPT {
		}
	}
	activity def AnswerLogAC {
		inParameters {
			Answer : SysADL.types.Any
		}
		outParameters {
			Log : SysADL.types.Log
		}
		acbody body {
			actions : ActionUse ConstruirLogAnswerAN {
				definition ConstruirLogAnswerAN pinIn {
					Answer : SysADL.types.Any
				}
			}
			delegate Answer to "ConstruirLogAnswerAN.Answer" delegate Log to
			ConstruirLogAnswerAN
		}
	}
	activity def QueryFiltroAC {
		inParameters {
			Data_Inicio : SysADL.types.DateTime, Data_Fim : SysADL.types.DateTime,
			TipoRelat : SysADL.types.TipoRelatorio
		}
		outParameters {
			Query : SysADL.types.Any
		}
		acbody body {
			actions : ActionUse ConstruirQueryFiltroAN {
				definition ConstruirQueryFiltroAN pinIn {
					Data_Inicio : SysADL.types.DateTime, TipoRelat :
					SysADL.types.TipoRelatorio, Data_Fim : SysADL.types.DateTime
				}
			}
			delegate Query to ConstruirQueryFiltroAN delegate TipoRelat to
			"ConstruirQueryFiltroAN.TipoRelat" delegate Data_Fim to
			"ConstruirQueryFiltroAN.Data_Fim" delegate Data_Inicio to
			"ConstruirQueryFiltroAN.Data_Inicio"
		}
	}
	action def ConstruirQueryFiltroAN ( Data_Inicio : SysADL.types.DateTime,
	Data_Fim : SysADL.types.DateTime, TipoRelat : SysADL.types.TipoRelatorio ) :
	SysADL.types.Any {
	}
	action def ConstruirLogAnswerAN ( Answer : SysADL.types.Any ) :
	SysADL.types.Log {
	}
}
package Connectors {
import SysADL.types;
	import Ports;

	
	connector def RelatorioCNT {
		participants ~ p19 : Ports.RelatorioOPT {
		}
		~ p20 : Ports.RelatorioIPT {
		}
	flows SysADL.types.Relatorio from p19 to p20
	}
	connector def PresencaCNT {
		participants ~ p11 : Ports.PresencaOPT {
		}
		~ p12 : Ports.PresencaIPT {
		}
		flows SysADL.types.Presenca from p11 to p12
	}
	connector def ComCancelaCNT {
		participants ~ p9 : Ports.ComandoCancelaOPT {
		}
		~ p10 : Ports.ComandoCancelaIPT {
		}
		flows 
	SysADL.types.ComandoCancela from p9 to p10
	}
	connector def TicketCNT {
		participants ~ p1 : Ports.TicketOPT {
		}
		~ p2 : Ports.TicketIPT {
		}
		flows 
	SysADL.types.Ticket from p1 to p2
	}
	connector def ValorPagCNT {
		participants ~ p5 : Ports.ValorPagOPT {
		}
		~ p6 : Ports.ValorPagIPT {
		}
		flows 
	SysADL.types.ValorPag from p5 to p6
	}
connector def ConfPagCNT {
		participants ~ p7 : Ports.ConfPagOPT {
		}
		~ p8 : Ports.ConfPagIPT {
		}
		flows SysADL.types.ConfPag from p7 to p8
	}
	connector def CorLedCNT {
		participants ~ p13 : Ports.CorLedOPT {
		}
		~ p14 : Ports.CorLedIPT {
		}
		flows SysADL.types.CorLed from p13 to p14
	}
	connector def QtVagasCNT {
		participants ~ p17 : Ports.QtVagasOPT {
		}
		~ p18 : Ports.QtVagasIPT {
		}
		flows SysADL.types.Int from p17 to p18
	}
	connector def TipoVagaCNT {
		participants ~ p15 : Ports.TipoVagaOPT {
		}
		~ p16 : Ports.TipoVagaIPT {
		}
		flows SysADL.types.TiposVaga from p15 to p16
	}
connector def TipoRelatorioCNT {
		participants ~ p21 : Ports.TipoRelatorioOPT {
		}
		~ p22 : Ports.TipoRelatorioIPT {
		}
		flows SysADL.types.TipoRelatorio from p21 to p22
	}
	connector def DateTimeCNT {
		participants ~ p23 : Ports.DateTimeOPT {
		}
		~ p24 : Ports.DateTimeIPT {
		}
		flows SysADL.types.DateTime from p23 to p24
	}
	connector def LogUsoCNT {
		participants ~ p25 : Ports.LogUsoOPT {
		}
		~ p26 : Ports.LogUsoIPT {
		}
		flows SysADL.types.Log from p25 to p26
	}
connector def ConfImpTicketCNT {
		participants ~ p27 : Ports.ConfImpTicketOPT {
		}
		~ p28 : Ports.ConfImpTicketIPT {
		}
		flows SysADL.types.ConfImpTicket from p27 to p28
	}

	
	connector def CodigoTicketCNT {
		participants ~ p29 : Ports.CodigoTicketOPT {
		}
		~ p31 : Ports.CodigoTicketIPT {
		}
		flows SysADL.types.CodBarras from p29 to p31
	}
connector def VagaCNT {
		participants ~ p32 : Ports.VagaOPT {
		}
		~ p33 : Ports.VagaIPT {
		}
		flows SysADL.types.Vaga from p32 to p33
	}
connector def LeitTicketCNT {
		participants ~ p34 : Ports.LeitTicketOPT {
		}
		~ p35 : Ports.LeitTicketIPT {
		}
		flows SysADL.types.LeitTicket from p34 to p35
	}
	connector def DataFiltroCNT {
		participants ~ p36 : Ports.DataFiltroOPT {
		}
		~ p37 : Ports.DataFiltroIPT {
		}
		configuration {
		}
		flows SysADL.types.DateTime from Ports.DataFiltroOPT.data_inicioOPT to
		Ports.DataFiltroIPT.data_inicioIPT SysADL.types.DateTime from
		Ports.DataFiltroOPT.data_fimOPT to Ports.DataFiltroIPT.data_fimIPT
	}

connector def ClientServerQueryCN {
		participants ~ querOPT : Ports.QueryOPT {
		}
		~ querIPT : Ports.QueryIPT {
		}
		flows SysADL.types.Any from querOPT to querIPT
	}
	connector def ClientServerAnswerCN {
		participants ~ ansOPT : Ports.AnswerOPT {
		}
		~ ansIPT : Ports.AnswerIPT {
		}
		flows SysADL.types.Any from ansOPT to ansIPT
	}
	connector def ClientServerCN {
		participants ~ clientPT : Ports.ClientPT {
		}
		~ serverPT : Ports.ServerPT {
		}
		configuration {
		}
		flows SysADL.types.Any from Ports.ClientPT.QueryOUT to
		Ports.ServerPT.QueryIN SysADL.types.Any from Ports.ServerPT.AnswerOUT to
		Ports.ClientPT.AnswerIN
	}
	connector def BooleanCNT {
		participants ~ boolOut : Ports.BooleanOPT {
		}
		~ boolIn : Ports.BooleanIPT {
		}
		flows SysADL.types.Boolean from boolOut to boolIn
	}
}
package Ports {
import SysADL.types;
	
	
	port def PresencaIPT {
		flow in SysADL.types.Presenca
	}
	port def PresencaOPT {
		flow out SysADL.types.Presenca
	}
	port def ComandoCancelaIPT {
		flow in SysADL.types.ComandoCancela
	}
	port def ComandoCancelaOPT {
		flow out SysADL.types.ComandoCancela
	}
	port def RelatorioIPT {
		flow in SysADL.types.Relatorio
	}
	port def RelatorioOPT {
		flow out SysADL.types.Relatorio
	}
port def ValorPagIPT {
		flow in SysADL.types.ValorPag
	}
	port def ValorPagOPT {
		flow out SysADL.types.ValorPag
	}
	port def CodigoTicketIPT {
		flow in SysADL.types.CodBarras
	}
	
port def TicketIPT {
		flow in SysADL.types.Ticket
	}
	
	
	port def TicketOPT {
		flow out SysADL.types.Ticket
	}
port def QtVagasIPT {
		flow in SysADL.types.Int
	}
	port def QtVagasOPT {
		flow out SysADL.types.Int
	}
	port def CorLedIPT {
		flow in SysADL.types.CorLed
	}
	port def CorLedOPT {
		flow out SysADL.types.CorLed
	}
port def PagamentoIPT {
		flow in SysADL.types.Dinheiro
	}
	port def ConfPagOPT {
		flow out SysADL.types.ConfPag
	}
	port def ConfPagIPT {
		flow in SysADL.types.ConfPag
	}
	port def TipoVagaIPT {
		flow in SysADL.types.TiposVaga
	}
	port def TipoVagaOPT {
		flow out SysADL.types.TiposVaga
	}
port def TipoRelatorioIPT {
		flow in SysADL.types.TipoRelatorio
	}
	port def TipoRelatorioOPT {
		flow out SysADL.types.TipoRelatorio
	}
	port def DateTimeIPT {
		flow in SysADL.types.DateTime
	}
	port def DateTimeOPT {
		flow out SysADL.types.DateTime
	}
	port def LogUsoIPT {
		flow in SysADL.types.Log
	}
	port def LogUsoOPT {
		flow out SysADL.types.Log
	}
port def ConfImpTicketIPT {
		flow in SysADL.types.ConfImpTicket
	}
	port def ConfImpTicketOPT {
		flow out SysADL.types.ConfImpTicket
	}
port def CodigoTicketOPT {
		flow out SysADL.types.CodBarras
	}
port def VagaIPT {
		flow in SysADL.types.Vaga
	}
	port def VagaOPT {
		flow out SysADL.types.Vaga
	}
port def BooleanIPT {
		flow in SysADL.types.Boolean
	}
	port def BooleanOPT {
		flow in SysADL.types.Boolean
	}
port def LeitTicketIPT {
		flow in SysADL.types.LeitTicket
	}
	port def LeitTicketOPT {
		flow out SysADL.types.LeitTicket
	}
	port def DataFiltroOPT {
		ports data_inicioOPT : DateTimeOPT {
		}
		data_fimOPT : DateTimeOPT {
		}
	}
	port def DataFiltroIPT {
		ports data_inicioIPT : DateTimeIPT {
		}
		data_fimIPT : DateTimeIPT {
		}
	}

	
port def QueryOPT {
		flow in SysADL.types.Any
	}
	port def QueryIPT {
		flow in SysADL.types.Any
	}
	port def AnswerOPT {
		flow in SysADL.types.Any
	}
	port def AnswerIPT {
		flow in SysADL.types.Any
	}
	port def ClientPT {
		ports AnswerIN : AnswerIPT {
		}
		QueryOUT : QueryOPT {
		}
	}
	port def ServerPT {
		ports AnswerOUT : AnswerOPT {
		}
		QueryIN : QueryIPT {
		}
	}
}