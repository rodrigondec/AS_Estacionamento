Model SysADLArchitecture;
package SysADL.types {
	value type Int {
	}
	value type Boolean {
	}
	value type String {
	}
	value type Void {
	}
	value type Real {
	}
	datatype Cor {
			attributes valor : Cores
		}
	datatype Presenca {
		attributes valor : Boolean
	}
	datatype Ticket {
		attributes codigo : CodBarras hora : Hora
	}
	value type CodBarras {
	}
	value type Hora {
	}
	enum Cores {
		Azul, Verde, Amarelo, Vermelho
	}
	datatype qtVagas {
		attributes valor : Int
	}
	datatype ComandoCancela {
		attributes valor : AcoesCancela
	}
	enum AcoesCancela {
		Abrir, Fechar
	}
	datatype Relatorio {
	}
	datatype RelatorioFinanceiro extends Relatorio {
	}
	datatype RelatorioOcupacao extends Relatorio {
	}
datatype ValorPagamento {
		attributes Valor : Dinheiro
	}
	value type Dinheiro {
	}
	datatype ConfirmacaoPagamento {
		attributes valor : Boolean
	}
}
Requirement GerenciarVagas ( 01 ) {
	text = "O sistema deve monitorar cada uma das vagas do estacionamento e sinalizar o status da vaga por meio de lâmpadas, diferenciando as vagas destinadas a idosos e deficientes físicos das demais"
Requirement SinalizarStatusdaVaga ( 01.1 ) {
	text = "O status da vaga deve ser representado pela cor da lâmpada associada a ela, a cor vermelha indica que a vaga está ocupada, a cor verde indica que a vaga está disponível, a cor amarela indica que a vaga está disponível e que é destinada a idosos, a cor azul indica que a vaga está disponível e que é destinada à deficientes físicos."
}
	Requirement DetectarStatusdaVaga ( 01.2 ) {
	text = "O sistema deve detectar para cada vaga do estacionamento se existe ou não um veículo estacionado"
}
Requirement SinalizarQuantidadedeVagasDisponiveis ( 1.3 ) {
		text =
		"O sistema deve indicar em painéis a quantidade de vagas disponíveis em cada ala do estacionamento."
	}
}
Requirement GerenciarEntradadeVeiculos ( 2.0 ) {
	text =
	"O sistema deve controlar a entrada de veículos por meio de uma cancela eletrônica. Um ticket com código de barras deve ser impresso para cada motorista antes de  o mesmo entrar no estacionamento."
	Requirement ImprimirTicket ( 2.1 ) {
		text =
		"Antes de o motorista entrar no estacionamento um ticket com código de barras deve ser impresso e recolhido pelo motorista. Associado ao código de barras impresso no ticket o sistema deve armazenar a hora em que o ticket foi gerado."
	}
}
Requirement GerenciarSaidaVeiculos ( 3.0 ) {
	text =
	"O sistema deve gerenciar a saída de veículos por meio de uma cancela eletrônica. Os veículos poderão deixar o estacionamento apenas após o pagamento da taxa de estacionamento."
	Requirement LerTicket ( 3.1 ) {
		text =
		"A partir da leitura do código de barras impresso no ticket o sistema deve recuperar todas as informações associadas ao ticket (horário de entrada\r\nno estacionamento, valor da taxa de estacionamento,  se a taxa foi ou não paga, se foi paga o horário de pagamento )."
	}
}
Requirement GerarRelatorio ( 7.0 ) {
	text =
	"O sistema deve permitir ao gerente consultar a ocupação do estacionamento e gerar relatórios financeiros."
	Requirement GerarRelatorioFinanceiro ( 7.1 ) {
		text =
		"O sistema deve permitir ao gerente gerar relatórios que detalhem a arrecadação do estacionamento em períodos de tempo informados pelo gerente."
	}
	Requirement ConsultarOcupacao ( 7.2 ) {
		text =
		"O sistema deve permitir ao gerente consultar a ocupação do estacionamento por dia, hora, semana e mês."
	}
}

Requirement GerenciarPagamento ( 6.0 ) {
	text =
	"O sistema deve permitir ao usuário realizar o pagamento da taxa de estacionamento. O pagamento deve ser calculado com base no tempo em que o veículo esteve no estacionamento."
	Requirement RealizarPagamento ( 6.1 ) {
		text =
		"O sistema deve permitir ao usuário realizar o pagamento em caixas automáticos com cartão ou dinheiro."
	}
}
Requirement AbrirCancelaEletronica ( 5.0 ) {
	text =
	"A cancela eletrônica deve abrir automaticamente após o motorista recolher o ticket impresso na entrada e no momento em que o motorista apresentar o ticket devidamente paga na saída do estacionamento"
}
Requirement DetectarVeivulo ( 4.0 ) {
	text =
	"Ao se se aproximar com o veículo da cancela eletrônica a presença do veículo deve ser detectada de forma automática."
}
Requirement AbrirCancelaEmergencial ( 8.0 ) {
	text =
	"Em casos de emergência o operador do estacionamento poderá abrir a cancela de emergência."
}
package Components {
}
package Connectors {
import SysADL.types;
}
package Ports {
import SysADL.types;
	port def CorIPT {
		flow in valor : "SysADL.types.Cor"
	}
	port def CorOPT {
		flow out valor : "SysADL.types.Cor"
	}
	port def PresencaIPT {
		flow in valor : "SysADL.types.Presenca"
	}
	port def PresencaOPT {
		flow out valor : "SysADL.types.Presenca"
	}
	port def CancelaIPT {
		flow in valor : "SysADL.types.ComandoCancela"
	}
	port def CancelaOPT {
		flow out valor : "SysADL.types.ComandoCancela"
	}
	port def RelatorioIPT {
		flow in relatorio : "SysADL.types.Relatorio"
	}
	port def RelatorioOPT {
		flow out relatorio : "SysADL.types.Relatorio"
	}
port def ValorPagamentoIPT {
		flow in valor : "SysADL.types.ValorPagamento"
	}
	port def ValorPagamentoOPT {
		flow out valor : "SysADL.types.ValorPagamento"
	}
	port def CodigoTicketIPT {
		flow in valor : "SysADL.types.CodBarras"
	}
	port def CodigoTicketOPT {
		flow out valor : "SysADL.types.CodBarras"
	}
}