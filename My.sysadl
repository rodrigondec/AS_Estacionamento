Model SysADLArchitecture;
package SysADL.types {
	value type Int {
	}
	value type Boolean {
	}
	value type String {
	}
	value type Void {
	}
	value type Real {
	}
	
	datatype Presenca {
		attributes valor : Boolean
	id_sensor : Int
	}
	datatype Ticket {
		attributes codigo : CodBarras hora : Hora
	status : StatusTicket
	}
	value type CodBarras {
	}
	value type Hora {
	}
	enum Cor {
		Verde, Amarelo, Azul, Vermelho
	}
	
	
	enum AcoesCancela {
		Abrir, Fechar
	}
	datatype Relatorio {
	}
	datatype RelatorioFinanceiro extends Relatorio {
	}
	datatype RelatorioOcupacao extends Relatorio {
	}
datatype ValorPag {
		attributes Valor : Dinheiro
	}
	value type Dinheiro {
	}
	datatype ConfPag {
		attributes valor : Boolean
	id_ticket : Int
	}
enum TipoVaga {
		Normal, Idoso, Deficiente
	}
	
enum TipoRelatorio {
		RelatorioOcupacao, RelatorioFinanceiro
	}
	value type DateTime {
	}
	datatype Log {
	}
datatype ConfImpTicket {
		attributes id_impressora : Int
	valor : Boolean
	}
enum StatusTicket {
		Pago, Pendente
	}
	datatype ComandoCancela {
		attributes Acao : AcoesCancela id_cancela : Int
	}
datatype CorLed {
		attributes cor : Cor id_led : Int
	}
datatype Vaga {
		attributes id_vaga : Int tipo : TipoVaga ocupada : Boolean
	}
datatype LeitTicket {
		attributes codigo : CodBarras id_leitora : Int
	}
}
Requirement AbrirCancelaEletronica ( 5.0 ) {
	text =
	"A cancela eletrônica deve abrir automaticamente após o motorista recolher o ticket impresso na entrada e no momento em que o motorista apresentar o ticket devidamente paga na saída do estacionamento"
derive "GerenciarEstacionamento.GerenciarEntradadeVeiculos";
}
Requirement DetectarVeivulo ( 4.0 ) {
	text =
	"Ao se se aproximar com o veículo da cancela eletrônica a presença do veículo deve ser detectada de forma automática."
derive "GerenciarEstacionamento.GerenciarEntradadeVeiculos";
}

Requirement GerenciarEstacionamento ( 0.0 ) {
	text =
	"tem como objetivo facilitar a busca de vagas disponíveis e proporcionar comodidade e praticidade a seus usuários"
	Requirement GerenciarVagas ( 01 ) {
	text = "O sistema deve monitorar cada uma das vagas do estacionamento e sinalizar o status da vaga por meio de lâmpadas, diferenciando as vagas destinadas a idosos e deficientes físicos das demais"
Requirement SinalizarStatusdaVaga ( 01.1 ) {
	text = "O status da vaga deve ser representado pela cor da lâmpada associada a ela, a cor vermelha indica que a vaga está ocupada, a cor verde indica que a vaga está disponível, a cor amarela indica que a vaga está disponível e que é destinada a idosos, a cor azul indica que a vaga está disponível e que é destinada à deficientes físicos."
}
	Requirement DetectarStatusdaVaga ( 01.2 ) {
	text = "O sistema deve detectar para cada vaga do estacionamento se existe ou não um veículo estacionado"
}
Requirement SinalizarQuantidadedeVagasDisponiveis ( 1.3 ) {
		text =
		"O sistema deve indicar em painéis a quantidade de vagas disponíveis em cada ala do estacionamento."
	}
}
	Requirement GerenciarEntradadeVeiculos ( 2.0 ) {
	text =
	"O sistema deve controlar a entrada de veículos por meio de uma cancela eletrônica. Um ticket com código de barras deve ser impresso para cada motorista antes de  o mesmo entrar no estacionamento."
	Requirement ImprimirTicket ( 2.1 ) {
		text =
		"Antes de o motorista entrar no estacionamento um ticket com código de barras deve ser impresso e recolhido pelo motorista. Associado ao código de barras impresso no ticket o sistema deve armazenar a hora em que o ticket foi gerado."
	}
}
	Requirement GerenciarSaidaVeiculos ( 3.0 ) {
	text =
	"O sistema deve gerenciar a saída de veículos por meio de uma cancela eletrônica. Os veículos poderão deixar o estacionamento apenas após o pagamento da taxa de estacionamento."
	Requirement LerTicket ( 3.1 ) {
		text =
		"A partir da leitura do código de barras impresso no ticket o sistema deve recuperar todas as informações associadas ao ticket (horário de entrada\r\nno estacionamento, valor da taxa de estacionamento,  se a taxa foi ou não paga, se foi paga o horário de pagamento )."
	}
}
	Requirement AbrirCancelaEmergencial ( 8.0 ) {
	text =
	"Em casos de emergência o operador do estacionamento poderá abrir a cancela de emergência."
}
Requirement GerarRelatorio ( 7.0 ) {
	text =
	"O sistema deve permitir ao gerente consultar a ocupação do estacionamento e gerar relatórios financeiros."
	Requirement GerarRelatorioFinanceiro ( 7.1 ) {
		text =
		"O sistema deve permitir ao gerente gerar relatórios que detalhem a arrecadação do estacionamento em períodos de tempo informados pelo gerente."
	}
	Requirement ConsultarOcupacao ( 7.2 ) {
		text =
		"O sistema deve permitir ao gerente consultar a ocupação do estacionamento por dia, hora, semana e mês."
	}
}
	Requirement GerenciarPagamento ( 6.0 ) {
	text =
	"O sistema deve permitir ao usuário realizar o pagamento da taxa de estacionamento. O pagamento deve ser calculado com base no tempo em que o veículo esteve no estacionamento."
	Requirement RealizarPagamento ( 6.1 ) {
		text =
		"O sistema deve permitir ao usuário realizar o pagamento em caixas automáticos com cartão ou dinheiro."
	}
}
}
package Components {
import Ports;
	import Connectors;
	import SysADL.types;
	component def ControladorCorCP {
	ports 
		Cor : Ports.CorLedOPT {
		}
	Vaga : Ports.VagaIPT {
		}
	}
	boundary component def SensorPresencaCP {
		ports Presenca : Ports.PresencaOPT {
		}
	}
	boundary component def LedVagaCP {
	ports Cor : Ports.CorLedIPT {
		}
	}
	component def GerenciadorEstacionamento {
		configuration {
			components:			
			GerenciadorVagaCP : GerenciadorVagaCP {
				using ports 
				
			}
			GerenciadorCancelaCP : GerenciadorCancelaCP {
				using ports Comando : Ports.ComandoCancelaIPT {
				}
			}
			EntradaCP : EntradaCP {
				using ports ConfImp : Ports.ConfImpTicketOPT {
				}
				Ticket : Ports.TicketOPT {
				}
			}
			SaidaCP : SaidaCP {
				using ports LeitTicket : Ports.CodigoTicketOPT {
				}
			}
			GerenciadorPagamentoCP : GerenciadorPagamentoCP {
				using ports ConfPag : Ports.ConfPagOPT {
				}
				CodTicket : Ports.CodigoTicketOPT {
				}
				Ticket : Ports.TicketIPT {
				}
			}
			GerenciadorRelatorioCP : GerenciadorRelatorioCP {
				using ports p21 : Ports.TipoRelatorioOPT {
				}
				p26 : Ports.LogUsoIPT {
				}
				DataFiltro : Ports.DataFiltroOPT {
				}
			}
			ControladorGeralCP : ControladorGeralCP {
				using ports CodTicket : Ports.CodigoTicketIPT {
				}
				TicketOut : Ports.TicketOPT {
				}
				TicketIn : Ports.TicketIPT {
				}
				ConfPag : Ports.ConfPagIPT {
				}
				LeitTicket : Ports.LeitTicketIPT {
				}
				ConfImp : Ports.ConfImpTicketIPT {
				}
				Comando : Ports.ComandoCancelaOPT {
				}
				TipoRelat : Ports.TipoRelatorioIPT {
				}
				DataFiltro : Ports.DataFiltroIPT {
				}
				Uso : Ports.LogUsoOPT {
				}
			}
			connectors:
			LeitTicket : Connectors.LeitTicketCNT bindings SaidaCP.LeitTicket =
			ControladorGeralCP.LeitTicket ConfImp : Connectors.ConfImpTicketCNT
			bindings EntradaCP.ConfImp = ControladorGeralCP.ConfImp Ticket :
			Connectors.TicketCNT bindings EntradaCP.Ticket =
			ControladorGeralCP.TicketIn Ticket : Connectors.TicketCNT bindings
			ControladorGeralCP.TicketOut = GerenciadorPagamentoCP.Ticket ConfPag :
			Connectors.ConfPagCNT bindings GerenciadorPagamentoCP.ConfPag =
			ControladorGeralCP.ConfPag CodTicket : Connectors.CodigoTicketCNT bindings
			GerenciadorPagamentoCP.CodTicket = ControladorGeralCP.CodTicket Comando :
			Connectors.ComCancelaCNT bindings ControladorGeralCP.Comando =
			GerenciadorCancelaCP.Comando DadosUso : Connectors.LogUsoCNT bindings
			ControladorGeralCP.Uso = GerenciadorRelatorioCP.p26 TipoRelat :
			Connectors.TipoRelatorioCNT bindings GerenciadorRelatorioCP.p21 =
			ControladorGeralCP.TipoRelat DataFiltro : Connectors.DataFiltroCNT bindings
			GerenciadorRelatorioCP.DataFiltro = ControladorGeralCP.DataFiltro
		}
	}
	boundary component def PainelLedCP {
		ports QtVagas : Ports.QtVagasIPT {
		}
	}
	boundary component def CancelaCP {
		ports Comando : Ports.ComandoCancelaIPT {
		}
	}
	boundary component def ImpressoraTicketCP {
		ports Presenca : Ports.PresencaIPT {
		}
		Ticket : Ports.TicketOPT {
		}
		
	ConfImp : Ports.ConfImpTicketOPT {
		}
	}
	boundary component def LeitorTicketCP {
		ports 
		LeitTicket : Ports.LeitTicketOPT {
		}
	}
	component def ValidadorPagamentoCP {
		ports ValorPago : Ports.ValorPagIPT {
		}
		
		ConfPag : Ports.ConfPagOPT {
		}
	ValorTicket : Ports.ValorPagIPT {
		}
	}
	component def CalculadorPrecoPagamentoCP {
		ports ValorTicket : Ports.ValorPagOPT {
		}
		Ticket : Ports.TicketIPT {
		}
	}
	component def SaidaCP {
		ports LeitTicket : Ports.LeitTicketOPT {
		}
		configuration {
			components:			
		
			LeitorTicketCP : LeitorTicketCP {
				using ports CodTicket : Ports.LeitTicketOPT {
				}
			}
			delegations:
			
		LeitorTicketCP.CodTicket to LeitTicket
		}
	}
	component def EntradaCP {
		ports ConfImp : Ports.ConfImpTicketOPT {
		}
		Ticket : Ports.TicketOPT {
		}
		
	configuration {
			components:			
		SensorPresenca : SensorPresencaCP {
				using ports Presenca : Ports.PresencaOPT {
				}
			}
			ImpressoraTicket : ImpressoraTicketCP {
				using ports Presenca : Ports.PresencaIPT {
				}
				Ticket : Ports.TicketOPT {
				}
				ConfImp : Ports.ConfImpTicketOPT {
				}
			}
		connectors:
			c1 : Connectors.PresencaCNT bindings SensorPresenca.Presenca =
			ImpressoraTicket.Presenca delegations:
			ImpressoraTicket.ConfImp to ConfImp
		ImpressoraTicket.Ticket to Ticket
		}
	}
	
	component def GerenciadorVagaCP {
		ports 
		
		configuration {
			components:
			
			PainelLedCP : PainelLedCP {
				using ports p18 : Ports.QtVagasIPT {
				}
			}
			
			ControladorCorCP : ControladorCorCP {
				using ports p13 : Ports.CorLedOPT {
				}
				p33 : Ports.VagaIPT {
				}
			}
			
			ControladorVagaCP : ControladorVagaCP {
				using ports Presenca : Ports.PresencaIPT {
				}
				VagaIO : Ports.VagaIO1 {
				}
				QtVagasOut : Ports.QtVagasOPT {
				}
				QtVagasIn : Ports.QtVagasIPT {
				}
				VagaOut : Ports.VagaOPT {
				}
				CorIn : Ports.CorLedIPT {
				}
				CorOut : Ports.CorLedOPT {
				}
			}
			BDVagaCP : BDVagaCP {
				using ports VagaIO : Ports.VagaIO2 {
				}
				QtVagas : Ports.QtVagasOPT {
				}
			}
			VagaCP : VagaCP [ 1, 30 ] {
				using ports Cor : Ports.CorLedIPT {
				}
				Presenca : Ports.PresencaOPT {
				}
			}
			connectors:
			VagaIO : Connectors.VagaIOCNT bindings ControladorVagaCP.VagaIO =
			BDVagaCP.VagaIO QtVagas : Connectors.QtVagasCNT bindings BDVagaCP.QtVagas =
			ControladorVagaCP.QtVagasIn QtVagas : Connectors.QtVagasCNT bindings
			ControladorVagaCP.QtVagasOut = PainelLedCP.p18 Cor : Connectors.CorLedCNT
			bindings ControladorCorCP.p13 = ControladorVagaCP.CorIn Vaga :
			Connectors.VagaCNT bindings ControladorVagaCP.VagaOut =
			ControladorCorCP.p33 Cor : Connectors.CorLedCNT bindings
			ControladorVagaCP.CorOut = VagaCP.Cor Presenca : Connectors.PresencaCNT
			bindings VagaCP.Presenca = ControladorVagaCP.Presenca
		}
	}
component def GerenciadorRelatorioCP {
		ports 
		p21 : Ports.TipoRelatorioOPT {
		}
		p26 : Ports.LogUsoIPT {
		}
		
	DataFiltro : Ports.DataFiltroOPT {
		}
		
		configuration {
			components:			
			InterfaceUsuarioRelatorioCP : InterfaceUsuarioRelatorioCP {
				using ports p21 : Ports.TipoRelatorioOPT {
				}
				DataFiltro : Ports.DataFiltroOPT {
				}
			}
			GeradorRelatorioCP : GeradorRelatorioCP {
				using ports p26 : Ports.LogUsoIPT {
				}
				p19 : Ports.RelatorioOPT {
				}
			}
			delegations:
			InterfaceUsuarioRelatorioCP.DataFiltro to DataFiltro
			InterfaceUsuarioRelatorioCP.p21 to p21 GeradorRelatorioCP.p26 to p26
		}
	}
	boundary component def InterfaceUsuarioRelatorioCP {
		ports 
		
		
		p21 : Ports.TipoRelatorioOPT {
		}
		
		
	DataFiltro : Ports.DataFiltroOPT {
		}
	}
	
	boundary component def GeradorRelatorioCP {
		ports p26 : Ports.LogUsoIPT {
		}
		p19 : Ports.RelatorioOPT {
		}
	}

component def VagaCP {
		ports 
		Cor : Ports.CorLedIPT {
		}
		Presenca : Ports.PresencaOPT {
		}
		configuration {
			components:
			
			
			
		SensorPresencaCP : SensorPresencaCP {
				using ports Presenca : Ports.PresencaOPT {
				}
			}
			LedVagaCP : LedVagaCP {
				using ports Cor : Ports.CorLedIPT {
				}
			}
			delegations:
			  
		SensorPresencaCP.Presenca to Presenca LedVagaCP.Cor to Cor
		}
	}
	
	
	component def GerenciadorCancelaCP {
		ports Comando : Ports.ComandoCancelaIPT {
		}
		configuration {
			components:
			
			CancelaCP : CancelaCP {
				using ports p10 : Ports.ComandoCancelaIPT {
				}
			}
			connectors:
			
		delegations:
			CancelaCP.p10 to Comando
		}
	}
component def GerenciadorPagamentoCP {
		ports ConfPag : Ports.ConfPagOPT {
		}
		CodTicket : Ports.CodigoTicketOPT {
		}
		Ticket : Ports.TicketIPT {
		}
		configuration {
		components:
			CalculadorPrecoPagamentoCP : CalculadorPrecoPagamentoCP {
				using ports ValorTicket : Ports.ValorPagOPT {
				}
				Ticket : Ports.TicketIPT {
				}
			}
			
			CentralPagamentoCP : CentralPagamentoCP {
				using ports ConfPag : Ports.ConfPagOPT {
				}
				ValorTicket : Ports.ValorPagIPT {
				}
				CodTicket : Ports.CodigoTicketOPT {
				}
			}
			connectors:
			  ValorTicket : Connectors.ValorPagCNT bindings CalculadorPrecoPagamentoCP.ValorTicket =
			CentralPagamentoCP.ValorTicket delegations:
			CalculadorPrecoPagamentoCP.Ticket to Ticket CentralPagamentoCP.CodTicket to CodTicket
			CentralPagamentoCP.ConfPag to ConfPag
		}
	}
component def CentralPagamentoCP {
		ports 
		ConfPag : Ports.ConfPagOPT {
		}
		ValorTicket : Ports.ValorPagIPT {
		}
		p29 : Ports.CodigoTicketOPT {
		}
		configuration {
			components:
			
			
			
			
			ValidadorPagamentoCP : ValidadorPagamentoCP {
				using ports ValorPago : Ports.ValorPagIPT {
				}
				ConfPag : Ports.ConfPagOPT {
				}
				ValorTicket : Ports.ValorPagIPT {
				}
			}
			
			CaixaPagamentoCP : CaixaPagamentoCP {
				using ports ValorPago : Ports.ValorPagOPT {
				}
				CodTicket : Ports.CodigoTicketOPT {
				}
			}
			connectors:
			ValorPago : Connectors.ValorPagCNT bindings CaixaPagamentoCP.ValorPago =
			ValidadorPagamentoCP.ValorPago delegations:
			
		ValidadorPagamentoCP.ValorTicket to ValorTicket ValidadorPagamentoCP.ConfPag
			to ConfPag
		CaixaPagamentoCP.CodTicket to p29
		}
	}
	

component def ControladorGeralCP {
		ports CodTicket : Ports.CodigoTicketIPT {
		}
		TicketOut : Ports.TicketOPT {
		}
		TicketIn : Ports.TicketIPT {
		}
		ConfPag : Ports.ConfPagIPT {
		}
	
	LeitTicket : Ports.LeitTicketIPT {
		}
		ConfImp : Ports.ConfImpTicketIPT {
		}
		Comando : Ports.ComandoCancelaOPT {
		}
		TipoRelat : Ports.TipoRelatorioIPT {
		}
		DataFiltro : Ports.DataFiltroIPT {
		}
		Uso : Ports.LogUsoOPT {
		}
		configuration {
			components:
			BDTicketCP : BDTicketCP {
			}
			ControladorCancelaCP : ControladorCancelaCP {
			}
			ControladorPagamentoCP : ControladorPagamentoCP {
			}
			ControladorRelatorioCP : ControladorRelatorioCP {
			}
		}
	}
	component def CaixaPagamentoCP {
		ports ValorPago : Ports.ValorPagOPT {
		}
		CodTicket : Ports.CodigoTicketOPT {
		}
		configuration {
			components:
			ReceptorCartaoCP : ReceptorCartaoCP {
				using ports ValorPago : Ports.ValorPagOPT {
				}
			}
			ReceptorDinheiroCP : ReceptorDinheiroCP {
				using ports ValorPago : Ports.ValorPagOPT {
				}
			}
			ScannerTicketCP : ScannerTicketCP {
				using ports CodTicket : Ports.CodigoTicketOPT {
				}
			}
			delegations:
			ReceptorCartaoCP.ValorPago to ValorPago ReceptorDinheiroCP.ValorPago to
			ValorPago
		ScannerTicketCP.CodTicket to CodTicket
		}
	}
	boundary component def ReceptorDinheiroCP {
		ports ValorPago : Ports.ValorPagOPT {
		}
	}
	boundary component def ReceptorCartaoCP {
		ports ValorPago : Ports.ValorPagOPT {
		}
	}
	boundary component def BDTicketCP {
	}
	boundary component def BDVagaCP {
	ports VagaIO : Ports.VagaIO2 {
		}
		QtVagas : Ports.QtVagasOPT {
		}
	}
	component def ControladorCancelaCP {
	}
	component def ControladorPagamentoCP {
	}
	component def ControladorRelatorioCP {
	}
boundary component def ScannerTicketCP {
		ports CodTicket : Ports.CodigoTicketOPT {
		}
	}
	component def ControladorVagaCP {
		ports Presenca : Ports.PresencaIPT {
		}
		VagaIO : Ports.VagaIO1 {
		}
		QtVagasOut : Ports.QtVagasOPT {
		}
		QtVagasIn : Ports.QtVagasIPT {
		}
		VagaOut : Ports.VagaOPT {
		}
		CorIn : Ports.CorLedIPT {
		}
		CorOut : Ports.CorLedOPT {
		}
	}
	activity def ControladorVagaAC {
		inParameters {
			Presenca : SysADL.types.Presenca, VagaAtualizadaIn : SysADL.types.Vaga,
			QtVagasIn : SysADL.types.Int, CorIn : SysADL.types.CorLed
		}
		outParameters {
			VagaParcial : SysADL.types.Vaga, QtVagasOut : SysADL.types.Int,
			VagaAtualizadaOut : SysADL.types.Vaga, CorOut : SysADL.types.CorLed
		}
		acbody body {
			actions : ActionUse AtualizarLed {
				definition AtualizarLed pinIn {
					Cor : SysADL.types.CorLed
				}
			}
			ActionUse PegarQtVagas {
				definition PegarQtVagas pinIn {
					QtVagas : SysADL.types.Int
				}
			}
			ActionUse GerarVagaParcial {
				definition GerarVagaParcial pinIn {
					Presenca : SysADL.types.Presenca
				}
			}
			ActionUse PegarVagaAtualizada {
				definition PegarVagaAtualizada pinIn {
					VagaAtualizada : SysADL.types.Vaga, VagaParcial : SysADL.types.Vaga
				}
			}
			delegate CorOut to AtualizarLed delegate CorIn to "AtualizarLed.Cor"
			delegate QtVagasIn to "PegarQtVagas.QtVagas" delegate QtVagasOut to
			PegarQtVagas delegate VagaParcial to GerarVagaParcial delegate Presenca to
			"GerarVagaParcial.Presenca" flow from GerarVagaParcial to delegate
			VagaAtualizadaIn to "PegarVagaAtualizada.VagaAtualizada" delegate
			VagaAtualizadaOut to PegarVagaAtualizada flow from GerarVagaParcial to
			"PegarVagaAtualizada.VagaParcial"
		}
	}
	action def GerarVagaParcial ( Presenca : SysADL.types.Presenca ) :
	SysADL.types.Vaga {
		postCondition VagaFromPresenca ( )
	}
	ConstraintDef VagaFromPresenca {
		paramIn {
			Presenca : SysADL.types.Presenca
		}
		paramOut {
			Vaga : SysADL.types.Vaga
		}
		equation ^true
	}
	activity def ControladorCorAC {
		inParameters {
			Vaga : SysADL.types.Vaga
		}
		outParameters {
			Cor : SysADL.types.CorLed
		}
		acbody body {
			actions : ActionUse GerarCor {
				definition GerarCor pinIn {
					vaga : SysADL.types.Vaga
				}
			}
			delegate Vaga to "GerarCor.vaga" delegate Cor to GerarCor
		}
	}
	action def GerarCor ( Vaga : SysADL.types.Vaga ) : SysADL.types.CorLed {
		postCondition CorFromVaga ( )
	}
	ConstraintDef CorFromVaga {
		equation ^true
	}
	action def PegarVagaAtualizada ( VagaAtualizada : SysADL.types.Vaga,
	VagaParcial : SysADL.types.Vaga ) : SysADL.types.Vaga {
	}
	action def AtualizarLed ( Cor : SysADL.types.CorLed ) : SysADL.types.CorLed {
	}
	action def PegarQtVagas ( QtVagas : SysADL.types.Int ) : SysADL.types.Int {
	}
	activity def CalculadorPrecoPagamentoAC {
		inParameters {
			Ticket : SysADL.types.Ticket
		}
		outParameters {
			ValorTicket : SysADL.types.ValorPag
		}
		acbody body {
		}
	}
	action def CalcularValor ( Ticket : SysADL.types.Ticket ) :
	SysADL.types.ValorPag {
		postCondition PrecoTicket ( )
	}
	ConstraintDef PrecoTicket {
		paramIn {
			Ticket : SysADL.types.Ticket
		}
		paramOut {
			ValorTicket : SysADL.types.ValorPag
		}
		equation ^true
	}
}
package Connectors {
import SysADL.types;
	import Ports;

	
	connector def RelatorioCNT {
		participants ~ p19 : Ports.RelatorioOPT {
		}
		~ p20 : Ports.RelatorioIPT {
		}
	flows SysADL.types.Relatorio from p19 to p20
	}
	connector def PresencaCNT {
		participants ~ p11 : Ports.PresencaOPT {
		}
		~ p12 : Ports.PresencaIPT {
		}
		flows SysADL.types.Presenca from p11 to p12
	}
	connector def ComCancelaCNT {
		participants ~ p9 : Ports.ComandoCancelaOPT {
		}
		~ p10 : Ports.ComandoCancelaIPT {
		}
		flows 
	SysADL.types.ComandoCancela from p9 to p10
	}
	connector def TicketCNT {
		participants ~ p1 : Ports.TicketOPT {
		}
		~ p2 : Ports.TicketIPT {
		}
		flows 
	SysADL.types.Ticket from p1 to p2
	}
	connector def ValorPagCNT {
		participants ~ p5 : Ports.ValorPagOPT {
		}
		~ p6 : Ports.ValorPagIPT {
		}
		flows 
	SysADL.types.ValorPag from p5 to p6
	}
connector def ConfPagCNT {
		participants ~ p7 : Ports.ConfPagOPT {
		}
		~ p8 : Ports.ConfPagIPT {
		}
		flows SysADL.types.ConfPag from p7 to p8
	}
	connector def CorLedCNT {
		participants ~ p13 : Ports.CorLedOPT {
		}
		~ p14 : Ports.CorLedIPT {
		}
		flows SysADL.types.CorLed from p13 to p14
	}
	connector def QtVagasCNT {
		participants ~ p17 : Ports.QtVagasOPT {
		}
		~ p18 : Ports.QtVagasIPT {
		}
		flows SysADL.types.Int from p17 to p18
	}
	connector def TipoVagaCNT {
		participants ~ p15 : Ports.TipoVagaOPT {
		}
		~ p16 : Ports.TipoVagaIPT {
		}
		flows SysADL.types.TipoVaga from p15 to p16
	}
connector def TipoRelatorioCNT {
		participants ~ p21 : Ports.TipoRelatorioOPT {
		}
		~ p22 : Ports.TipoRelatorioIPT {
		}
		flows SysADL.types.TipoRelatorio from p21 to p22
	}
	connector def DateTimeCNT {
		participants ~ p23 : Ports.DateTimeOPT {
		}
		~ p24 : Ports.DateTimeIPT {
		}
		flows SysADL.types.DateTime from p23 to p24
	}
	connector def LogUsoCNT {
		participants ~ p25 : Ports.LogUsoOPT {
		}
		~ p26 : Ports.LogUsoIPT {
		}
		flows SysADL.types.Log from p25 to p26
	}
connector def ConfImpTicketCNT {
		participants ~ p27 : Ports.ConfImpTicketOPT {
		}
		~ p28 : Ports.ConfImpTicketIPT {
		}
		flows SysADL.types.ConfImpTicket from p27 to p28
	}
connector def TicketToComCancelaCNT {
		participants ~ p1 : Ports.TicketOPT {
		}
		~ p10 : Ports.ComandoCancelaIPT {
		}
		configuration {
		}
		flows SysADL.types.Ticket from p1 to p10
	}
	connector def ConfImpToComCancelaCNT {
		participants ~ p27 : Ports.ConfImpTicketOPT {
		}
		~ p10 : Ports.ComandoCancelaIPT {
		}
		configuration {
		}
		flows SysADL.types.ConfImpTicket from p27 to p10
	}
	connector def CodigoTicketCNT {
		participants ~ p29 : Ports.CodigoTicketOPT {
		}
		~ p31 : Ports.CodigoTicketIPT {
		}
		flows SysADL.types.CodBarras from p29 to p31
	}
connector def VagaCNT {
		participants ~ p32 : Ports.VagaOPT {
		}
		~ p33 : Ports.VagaIPT {
		}
		flows SysADL.types.Vaga from p32 to p33
	}
connector def LeitTicketCNT {
		participants ~ p34 : Ports.LeitTicketOPT {
		}
		~ p35 : Ports.LeitTicketIPT {
		}
		flows SysADL.types.LeitTicket from p34 to p35
	}
	connector def DataFiltroCNT {
		participants ~ p36 : Ports.DataFiltroOPT {
		}
		~ p37 : Ports.DataFiltroIPT {
		}
		configuration {
		}
		flows SysADL.types.DateTime from Ports.DataFiltroOPT.data_inicioOPT to
		Ports.DataFiltroIPT.data_inicioIPT SysADL.types.DateTime from
		Ports.DataFiltroOPT.data_fimOPT to Ports.DataFiltroIPT.data_fimIPT
	}
connector def VagaIOCNT {
		participants ~ p38 : Ports.VagaIO1 {
		}
		~ p39 : Ports.VagaIO2 {
		}
		configuration {
		}
		flows SysADL.types.Vaga from Ports.VagaIO1.vagaOUT to Ports.VagaIO2.vagaIN
		SysADL.types.Vaga from Ports.VagaIO2.vagaOut to Ports.VagaIO1.vagaIN
	}
}
package Ports {
import SysADL.types;
	
	
	port def PresencaIPT {
		flow in SysADL.types.Presenca
	}
	port def PresencaOPT {
		flow out SysADL.types.Presenca
	}
	port def ComandoCancelaIPT {
		flow in SysADL.types.ComandoCancela
	}
	port def ComandoCancelaOPT {
		flow out SysADL.types.ComandoCancela
	}
	port def RelatorioIPT {
		flow in SysADL.types.Relatorio
	}
	port def RelatorioOPT {
		flow out SysADL.types.Relatorio
	}
port def ValorPagIPT {
		flow in SysADL.types.ValorPag
	}
	port def ValorPagOPT {
		flow out SysADL.types.ValorPag
	}
	port def CodigoTicketIPT {
		flow in SysADL.types.CodBarras
	}
	
port def TicketIPT {
		flow in SysADL.types.Ticket
	}
	
	
	port def TicketOPT {
		flow out SysADL.types.Ticket
	}
port def QtVagasIPT {
		flow in SysADL.types.Int
	}
	port def QtVagasOPT {
		flow out SysADL.types.Int
	}
	port def CorLedIPT {
		flow in SysADL.types.CorLed
	}
	port def CorLedOPT {
		flow out SysADL.types.CorLed
	}
port def PagamentoIPT {
		flow in SysADL.types.Dinheiro
	}
	port def ConfPagOPT {
		flow out SysADL.types.ConfPag
	}
	port def ConfPagIPT {
		flow in SysADL.types.ConfPag
	}
	port def TipoVagaIPT {
		flow in SysADL.types.TipoVaga
	}
	port def TipoVagaOPT {
		flow out SysADL.types.TipoVaga
	}
port def TipoRelatorioIPT {
		flow in SysADL.types.TipoRelatorio
	}
	port def TipoRelatorioOPT {
		flow out SysADL.types.TipoRelatorio
	}
	port def DateTimeIPT {
		flow in SysADL.types.DateTime
	}
	port def DateTimeOPT {
		flow out SysADL.types.DateTime
	}
	port def LogUsoIPT {
		flow in SysADL.types.Log
	}
	port def LogUsoOPT {
		flow out SysADL.types.Log
	}
port def ConfImpTicketIPT {
		flow in SysADL.types.ConfImpTicket
	}
	port def ConfImpTicketOPT {
		flow out SysADL.types.ConfImpTicket
	}
port def CodigoTicketOPT {
		flow out SysADL.types.CodBarras
	}
port def VagaIPT {
		flow in SysADL.types.Vaga
	}
	port def VagaOPT {
		flow out SysADL.types.Vaga
	}
port def BooleanIPT {
		flow in SysADL.types.Boolean
	}
	port def BooleanOPT {
		flow in SysADL.types.Boolean
	}
port def LeitTicketIPT {
		flow in SysADL.types.LeitTicket
	}
	port def LeitTicketOPT {
		flow out SysADL.types.LeitTicket
	}
	port def DataFiltroOPT {
		ports data_inicioOPT : DateTimeOPT {
		}
		data_fimOPT : DateTimeOPT {
		}
	}
	port def DataFiltroIPT {
		ports data_inicioIPT : DateTimeIPT {
		}
		data_fimIPT : DateTimeIPT {
		}
	}
port def VagaIO1 {
		ports vagaOUT : VagaOPT {
		}
		vagaIN : VagaIPT {
		}
	}
	port def VagaIO2 {
		ports vagaIN : VagaIPT {
		}
		vagaOut : VagaOPT {
		}
	}
}