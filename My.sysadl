Model SysADLArchitecture;
package SysADL.types {
	value type Int {
	}
	value type Boolean {
	}
	value type String {
	}
	value type Void {
	}
	value type Real {
	}
	
	datatype Presenca {
		attributes valor : Boolean
	id_sensor : Int
	}
	datatype Ticket {
		attributes codigo : CodBarras hora : Hora
	status : StatusTicket
	}
	value type CodBarras {
	}
	value type Hora {
	}
	enum Cor {
		Verde, Amarelo, Azul, Vermelho
	}
	
	
	enum AcoesCancela {
		Abrir, Fechar
	}
	datatype Relatorio {
	}
	datatype RelatorioFinanceiro extends Relatorio {
	}
	datatype RelatorioOcupacao extends Relatorio {
	}
datatype ValorPag {
		attributes Valor : Dinheiro
	}
	value type Dinheiro {
	}
	datatype ConfPag {
		attributes valor : Boolean
	id_ticket : Int
	}
enum TipoVaga {
		Normal, Idoso, Deficiente
	}
	
enum TipoRelatorio {
		RelatorioOcupacao, RelatorioFinanceiro
	}
	value type DateTime {
	}
	datatype Log {
	}
datatype ConfImpTicket {
		attributes id_impressora : Int
	valor : Boolean
	}
enum StatusTicket {
		Pago, Pendente
	}
	datatype ComandoCancela {
		attributes Acao : AcoesCancela id_cancela : Int
	}
datatype CorLed {
		attributes cor : Cor id_led : Int
	}
datatype Vaga {
		attributes id_vaga : Int tipo : TipoVaga ocupada : Boolean
	}
}
Requirement AbrirCancelaEletronica ( 5.0 ) {
	text =
	"A cancela eletrônica deve abrir automaticamente após o motorista recolher o ticket impresso na entrada e no momento em que o motorista apresentar o ticket devidamente paga na saída do estacionamento"
derive "GerenciarEstacionamento.GerenciarEntradadeVeiculos";
}
Requirement DetectarVeivulo ( 4.0 ) {
	text =
	"Ao se se aproximar com o veículo da cancela eletrônica a presença do veículo deve ser detectada de forma automática."
derive "GerenciarEstacionamento.GerenciarEntradadeVeiculos";
}

Requirement GerenciarEstacionamento ( 0.0 ) {
	text =
	"tem como objetivo facilitar a busca de vagas disponíveis e proporcionar comodidade e praticidade a seus usuários"
	Requirement GerenciarVagas ( 01 ) {
	text = "O sistema deve monitorar cada uma das vagas do estacionamento e sinalizar o status da vaga por meio de lâmpadas, diferenciando as vagas destinadas a idosos e deficientes físicos das demais"
Requirement SinalizarStatusdaVaga ( 01.1 ) {
	text = "O status da vaga deve ser representado pela cor da lâmpada associada a ela, a cor vermelha indica que a vaga está ocupada, a cor verde indica que a vaga está disponível, a cor amarela indica que a vaga está disponível e que é destinada a idosos, a cor azul indica que a vaga está disponível e que é destinada à deficientes físicos."
}
	Requirement DetectarStatusdaVaga ( 01.2 ) {
	text = "O sistema deve detectar para cada vaga do estacionamento se existe ou não um veículo estacionado"
}
Requirement SinalizarQuantidadedeVagasDisponiveis ( 1.3 ) {
		text =
		"O sistema deve indicar em painéis a quantidade de vagas disponíveis em cada ala do estacionamento."
	}
}
	Requirement GerenciarEntradadeVeiculos ( 2.0 ) {
	text =
	"O sistema deve controlar a entrada de veículos por meio de uma cancela eletrônica. Um ticket com código de barras deve ser impresso para cada motorista antes de  o mesmo entrar no estacionamento."
	Requirement ImprimirTicket ( 2.1 ) {
		text =
		"Antes de o motorista entrar no estacionamento um ticket com código de barras deve ser impresso e recolhido pelo motorista. Associado ao código de barras impresso no ticket o sistema deve armazenar a hora em que o ticket foi gerado."
	}
}
	Requirement GerenciarSaidaVeiculos ( 3.0 ) {
	text =
	"O sistema deve gerenciar a saída de veículos por meio de uma cancela eletrônica. Os veículos poderão deixar o estacionamento apenas após o pagamento da taxa de estacionamento."
	Requirement LerTicket ( 3.1 ) {
		text =
		"A partir da leitura do código de barras impresso no ticket o sistema deve recuperar todas as informações associadas ao ticket (horário de entrada\r\nno estacionamento, valor da taxa de estacionamento,  se a taxa foi ou não paga, se foi paga o horário de pagamento )."
	}
}
	Requirement AbrirCancelaEmergencial ( 8.0 ) {
	text =
	"Em casos de emergência o operador do estacionamento poderá abrir a cancela de emergência."
}
Requirement GerarRelatorio ( 7.0 ) {
	text =
	"O sistema deve permitir ao gerente consultar a ocupação do estacionamento e gerar relatórios financeiros."
	Requirement GerarRelatorioFinanceiro ( 7.1 ) {
		text =
		"O sistema deve permitir ao gerente gerar relatórios que detalhem a arrecadação do estacionamento em períodos de tempo informados pelo gerente."
	}
	Requirement ConsultarOcupacao ( 7.2 ) {
		text =
		"O sistema deve permitir ao gerente consultar a ocupação do estacionamento por dia, hora, semana e mês."
	}
}
	Requirement GerenciarPagamento ( 6.0 ) {
	text =
	"O sistema deve permitir ao usuário realizar o pagamento da taxa de estacionamento. O pagamento deve ser calculado com base no tempo em que o veículo esteve no estacionamento."
	Requirement RealizarPagamento ( 6.1 ) {
		text =
		"O sistema deve permitir ao usuário realizar o pagamento em caixas automáticos com cartão ou dinheiro."
	}
}
}
package Components {
import Ports;
	import Connectors;
	import SysADL.types;
	component def ControladorCorCP {
		
	ports 
		
		Cor : Ports.CorLedOPT {
		}
	Vaga : Ports.VagaIPT {
		}
	}
	boundary component def SensorPresencaCP {
		ports Presenca : Ports.PresencaOPT {
		}
	}
	boundary component def LedVagaCP {
	ports Cor : Ports.CorLedIPT {
		}
	}
	component def GerenciadorEstacionamento {
		configuration {
			components:
			
			
			
			
		
		
		GerenciadorCancelaCP : GerenciadorCancelaCP {
				using ports p10 : Ports.ComandoCancelaIPT {
				}
			}
			
			
			
			SaidaCP : SaidaCP [ 1, 8 ] {
				using ports p29 : Ports.CodigoTicketOPT {
				}
			}
			
			
			GerenciadorRelatorioCP : GerenciadorRelatorioCP {
				using ports p23 : Ports.DateTimeOPT {
				}
				p21 : Ports.TipoRelatorioOPT {
				}
				p26 : Ports.LogUsoIPT {
				}
			}
			GerenciadorVagaCP : GerenciadorVagaCP {
				using ports 
				
			}
			EntradaCP : EntradaCP [ 1, 8 ] {
				using ports p27 : Ports.ConfImpTicketOPT {
				}
				p1 : Ports.TicketOPT {
				}
			}
			
			ControladorTicketCP : ControladorTicketCP {
				using ports p30 : Ports.CodigoTicketIPT {
				}
				p1 : Ports.TicketOPT {
				}
				p2 : Ports.TicketIPT {
				}
				p7 : Ports.ConfPagIPT {
				}
			}
			
			
			GerenciadorPagamentoCP : GerenciadorPagamentoCP {
				using ports p7 : Ports.ConfPagOPT {
				}
				p29 : Ports.CodigoTicketOPT {
				}
				p2 : Ports.TicketIPT {
				}
			}
			BDTicketCP : BDTicketCP {
			}
			connectors: c5 : Connectors.ConfImpToComCancelaCNT bindings
			EntradaCP.p27 = GerenciadorCancelaCP.p10    
		c1 : Connectors.CodigoTicketCNT bindings SaidaCP.p29 = ControladorTicketCP.p30
			 c3 : Connectors.TicketCNT bindings EntradaCP.p1 =
			ControladorTicketCP.p2 c4 : Connectors.TicketToComCancelaCNT bindings
			ControladorTicketCP.p1 = GerenciadorCancelaCP.p10     
		c2 : Connectors.CodigoTicketCNT bindings GerenciadorPagamentoCP.p29 =
			ControladorTicketCP.p30 c6 : Connectors.ConfPagCNT bindings
			GerenciadorPagamentoCP.p7 = ControladorTicketCP.p7 c7 :
			Connectors.TicketCNT bindings ControladorTicketCP.p1 =
			GerenciadorPagamentoCP.p2
		}
	}
	component def PainelLedCP {
		ports QtVagas : Ports.QtVagasIPT {
		}
	}
	boundary component def CancelaCP {
		ports Comando : Ports.ComandoCancelaIPT {
		}
	}
	boundary component def ImpressoraTicketCP {
		ports Presenca : Ports.PresencaIPT {
		}
		Ticket : Ports.TicketOPT {
		}
		
	ConfImp : Ports.ConfImpTicketOPT {
		}
	}
	boundary component def LeitorTicketCP {
		ports 
		CodTicket : Ports.CodigoTicketOPT {
		}
	}
	component def ValidadorPagamentoCP {
		ports ValorPago : Ports.ValorPagIPT {
		}
		
		ConfPag : Ports.ConfPagOPT {
		}
	ValorTicket : Ports.ValorPagIPT {
		}
	}
	component def CalculadorPrecoPagamentoCP {
		ports ValorTicket : Ports.ValorPagOPT {
		}
		Ticket : Ports.TicketIPT {
		}
	}
	component def SaidaCP {
		ports CodTicket : Ports.CodigoTicketOPT {
		}
		configuration {
			components:			
		
			LeitorTicketCP : LeitorTicketCP {
				using ports p29 : Ports.CodigoTicketOPT {
				}
			}
			delegations:
			
		LeitorTicketCP.p29 to CodTicket
		}
	}
	component def EntradaCP {
		ports ConfImp : Ports.ConfImpTicketOPT {
		}
		Ticket : Ports.TicketOPT {
		}
		
	configuration {
			components:			
		SensorPresenca : SensorPresencaCP {
				using ports p11 : Ports.PresencaOPT {
				}
			}
			ImpressoraTicket : ImpressoraTicketCP {
				using ports p12 : Ports.PresencaIPT {
				}
				p1 : Ports.TicketOPT {
				}
				p27 : Ports.ConfImpTicketOPT {
				}
			}
		connectors:
			c1 : Connectors.PresencaCNT bindings SensorPresenca.p11 =
			ImpressoraTicket.p12 delegations:
			ImpressoraTicket.p27 to ConfImp
		ImpressoraTicket.p1 to Ticket
		}
	}
	
	component def GerenciadorVagaCP {
		ports 
		
		configuration {
			components:
			
			
			
			
			
		
			
			
			
			
			
			vagas : VagaCP [ 1, 30 ] {
				using ports 
				p14 : Ports.CorLedIPT {
				}
				p11 : Ports.PresencaOPT {
				}
			}
			PainelLedCP : PainelLedCP {
				using ports p18 : Ports.QtVagasIPT {
				}
			}
			
			ControladorCorCP : ControladorCorCP {
				using ports p13 : Ports.CorLedOPT {
				}
				p33 : Ports.VagaIPT {
				}
			}
			BDVagaCP : BDVagaCP {
				using ports p17 : Ports.QtVagasOPT {
				}
				p12 : Ports.PresencaIPT {
				}
				p32 : Ports.VagaOPT {
				}
			}
			connectors:
			
			  c3
			: Connectors.CorLedCNT bindings ControladorCorCP.p13 = vagas.p14
		c1 : Connectors.PresencaCNT bindings vagas.p11 = BDVagaCP.p12 c2 :
			Connectors.VagaCNT bindings BDVagaCP.p32 = ControladorCorCP.p33 c5 :
			Connectors.QtVagasCNT bindings BDVagaCP.p17 = PainelLedCP.p18
		}
	}
component def GerenciadorRelatorioCP {
		ports p23 : Ports.DateTimeOPT [ 2, 2 ] {
		}
		p21 : Ports.TipoRelatorioOPT {
		}
		p26 : Ports.LogUsoIPT {
		}
		configuration {
			components:
			
			
			
		
			
			GeradorRelatorioCP : GeradorRelatorioCP {
				using ports p26 : Ports.LogUsoIPT {
				}
				p19 : Ports.RelatorioOPT {
				}
			}
			InterfaceUsuarioRelatorio : InterfaceUsuarioRelatorioCP {
				using ports 
				
				p21 : Ports.TipoRelatorioOPT {
				}
				p23 : Ports.DateTimeOPT {
				}
			}
			delegations:
			InterfaceUsuarioRelatorio.p21 to p21 InterfaceUsuarioRelatorio.p23 to p23
			GeradorRelatorioCP.p26 to p26
		}
	}
	boundary component def InterfaceUsuarioRelatorioCP {
		ports 
		
		
		p21 : Ports.TipoRelatorioOPT {
		}
		
		p23 : Ports.DateTimeOPT [ 2, 2 ] {
		}
	}
	
	boundary component def GeradorRelatorioCP {
		ports p26 : Ports.LogUsoIPT {
		}
		p19 : Ports.RelatorioOPT {
		}
	}

component def VagaCP {
		ports 
		Cor : Ports.CorLedIPT {
		}
		Presenca : Ports.PresencaOPT {
		}
		configuration {
			components:
			SensorPresenca : SensorPresencaCP [ 1, 1 ] {
				using ports p11 : Ports.PresencaOPT {
				}
			}
			LedVaga : LedVagaCP [ 1, 1 ] {
				using ports P14 : Ports.CorLedIPT {
				}
			}
			
		delegations:
			SensorPresenca.p11 to Presenca  LedVaga.P14 to Cor
		}
	}
	
	
	component def GerenciadorCancelaCP {
		ports Comando : Ports.ComandoCancelaIPT {
		}
		configuration {
			components:
			
			CancelaCP : CancelaCP {
				using ports p10 : Ports.ComandoCancelaIPT {
				}
			}
			connectors:
			
		delegations:
			CancelaCP.p10 to Comando
		}
	}
component def GerenciadorPagamentoCP {
		ports ConfPag : Ports.ConfPagOPT {
		}
		CodTicket : Ports.CodigoTicketOPT {
		}
		Ticket : Ports.TicketIPT {
		}
		configuration {
		components:
			CalculadorPrecoPagamentoCP : CalculadorPrecoPagamentoCP {
				using ports p5 : Ports.ValorPagOPT {
				}
				p2 : Ports.TicketIPT {
				}
			}
			
			CentralPagamentoCP : CentralPagamentoCP {
				using ports p7 : Ports.ConfPagOPT {
				}
				p6 : Ports.ValorPagIPT {
				}
				p29 : Ports.CodigoTicketOPT {
				}
			}
			connectors:
			  c1 : Connectors.ValorPagCNT bindings CalculadorPrecoPagamentoCP.p5 =
			CentralPagamentoCP.p6 delegations:
			CalculadorPrecoPagamentoCP.p2 to Ticket CentralPagamentoCP.p29 to CodTicket
			CentralPagamentoCP.p7 to ConfPag
		}
	}
component def CentralPagamentoCP {
		ports 
		ConfPag : Ports.ConfPagOPT {
		}
		ValorTicket : Ports.ValorPagIPT {
		}
		p29 : Ports.CodigoTicketOPT {
		}
		configuration {
			components:
			
			
			LeitorTicketCP : LeitorTicketCP {
				using ports p29 : Ports.CodigoTicketOPT {
				}
			}
			CaixaPagamentoCP : CaixaPagamentoCP {
				using ports ValorPago : Ports.ValorPagOPT {
				}
			}
			ValidadorPagamentoCP : ValidadorPagamentoCP {
				using ports ValorPago : Ports.ValorPagIPT {
				}
				ConfPag : Ports.ConfPagOPT {
				}
				ValorTicket : Ports.ValorPagIPT {
				}
			}
			connectors:
			ValorPago : Connectors.ValorPagCNT bindings CaixaPagamentoCP.ValorPago =
			ValidadorPagamentoCP.ValorPago delegations:
			LeitorTicketCP.p29 to p29
		ValidadorPagamentoCP.ValorTicket to ValorTicket ValidadorPagamentoCP.ConfPag
			to ConfPag
		}
	}
	

component def ControladorTicketCP {
		ports CodTicket : Ports.CodigoTicketIPT {
		}
		TicketOut : Ports.TicketOPT {
		}
		TicketIn : Ports.TicketIPT {
		}
		ConfPag : Ports.ConfPagIPT {
		}
	
	}
	
	

	activity def ControladorCorAC {
		inParameters {
			Vaga : SysADL.types.Vaga
		}
		outParameters {
			Cor : SysADL.types.CorLed
		}
		acbody body {
			actions : ActionUse GerarCor {
				definition GerarCor pinIn {
					vaga : SysADL.types.Vaga
				}
			}
			flows : ActivityDelegation {
				source Cor target GerarCor
			}, ActivityDelegation {
				source Vaga target "GerarCor.vaga"
			}
		}
	}

action def GerarCor ( Vaga : SysADL.types.Vaga ) : SysADL.types.CorLed {
		postCondition VagaToCor ( ) {
		}
	}
	activity def PainelLedAC {
		inParameters {
			QTVagas : SysADL.types.Int
		}
		acbody body {
			actions : ActionUse AtualizarPainel {
				definition AtualizarPainel pinIn {
					qtvagas : SysADL.types.Int
				}
			}
			flows : ActivityDelegation {
				source QTVagas target "AtualizarPainel.qtvagas"
			}
		}
	}
	activity def ImpressoraTicketAC {
		inParameters {
			Presenca : SysADL.types.Presenca
		}
		outParameters {
			Ticket : SysADL.types.Ticket, ConfImp : SysADL.types.ConfImpTicket
		}
		acbody body {
			actions : ActionUse ImprimirTicket {
				definition ImprimirTicket pinIn {
					pre : SysADL.types.Presenca
				}
			}, ActionUse ConfirmarImpressao {
				definition ConfirmarImpressao pinIn {
					pre : SysADL.types.Presenca
				}
			}
			flows : ActivityDelegation {
				source Presenca target "ImprimirTicket.pre"
			}, ActivityDelegation {
				source Ticket target ImprimirTicket
			}, ActivityDelegation {
				source Presenca target "ConfirmarImpressao.pre"
			}, ActivityDelegation {
				source ConfImp target ConfirmarImpressao
			}
		}
	}
	
	
	
	action def AtualizarPainel ( QTVagas : SysADL.types.Int ) :
	SysADL.types.Boolean {
	}
	
	boundary component def BDVagaCP {
		ports QtVagas : Ports.QtVagasOPT {
		}
		Presenca : Ports.PresencaIPT {
		}
		Vaga : Ports.VagaOPT {
		}
	}
	
	action def ImprimirTicket ( Presenca : SysADL.types.Presenca ) :
	SysADL.types.Ticket {
	}
	action def ConfirmarImpressao ( Presenca : SysADL.types.Presenca ) :
	SysADL.types.ConfImpTicket {
		postCondition PresencaToConfImp ( ) {
		}
	}
	ConstraintDef PresencaToConfImp {
		paramIn {
			Presenca : SysADL.types.Presenca
		}
		paramOut {
			ConfImp : SysADL.types.ConfImpTicket
		}
	}
	
	ConstraintDef VagaToCor {
		paramIn {
			Vaga : SysADL.types.Vaga
		}
		paramOut {
			Cor : SysADL.types.CorLed
		}
	}
	
	
	
	activity def CaixaPagamentoAC {
		inParameters {
			Valor : SysADL.types.ValorPag
		}
		outParameters {
			ConfPag : SysADL.types.ConfPag
		}
		acbody body {
			actions : ActionUse RealizarPag {
				definition RealizarPag pinIn {
					pagamento : SysADL.types.Dinheiro, Valor : SysADL.types.ValorPag
				}
			}
			flows : ActivityDelegation {
				source ConfPag target RealizarPag
			}, ActivityDelegation {
				source Valor target "RealizarPag.Valor"
			}
		}
	}
	action def RealizarPag ( pagamento : SysADL.types.Dinheiro, Valor :
	SysADL.types.ValorPag ) : SysADL.types.ConfPag {
		postCondition AvaliarPagamento ( ) {
		}
	}
	ConstraintDef AvaliarPagamento {
		paramIn {
			Pagamento : SysADL.types.Dinheiro, Valor : SysADL.types.ValorPag
		}
		paramOut {
			ConfPag : SysADL.types.ConfPag
		}
	}
	activity def CalculadorPrecoPagamentoAC {
		inParameters {
			Ticket : SysADL.types.Ticket, HoraAtual : SysADL.types.Hora
		}
		outParameters {
			Valor : SysADL.types.ValorPag
		}
		acbody body {
			actions : ActionUse CalcularPreco {
				definition CalcularPreco pinIn {
					Ticket : SysADL.types.Ticket, HoraAtual : SysADL.types.Hora
				}
			}
			flows : ActivityDelegation {
				source HoraAtual target "CalcularPreco.HoraAtual"
			}, ActivityDelegation {
				source Ticket target "CalcularPreco.Ticket"
			}, ActivityDelegation {
				source Valor target CalcularPreco
			}
		}
	}
	action def CalcularPreco ( Ticket : SysADL.types.Ticket, HoraAtual :
	SysADL.types.Hora ) : SysADL.types.ValorPag {
		postCondition TabelaPreco ( ) {
		}
	}
	ConstraintDef TabelaPreco {
		paramIn {
			Ticket : SysADL.types.Ticket, HoraAtual : SysADL.types.Hora
		}
		paramOut {
			Valor : SysADL.types.ValorPag
		}
	}
	boundary component def BDTicketCP {
	}
component def CaixaPagamentoCP {
		ports ValorPago : Ports.ValorPagOPT {
		}
		configuration {
			components:
			ReceptorCartaoCP : ReceptorCartaoCP {
				using ports ValorPago : Ports.ValorPagOPT {
				}
			}
			ReceptorDinheiroCP : ReceptorDinheiroCP {
				using ports ValorPago : Ports.ValorPagOPT {
				}
			}
			delegations:
			ReceptorDinheiroCP.ValorPago to ValorPago ReceptorCartaoCP.ValorPago to
			ValorPago
		}
	}
	boundary component def ReceptorDinheiroCP {
		ports ValorPago : Ports.ValorPagOPT {
		}
	}
	boundary component def ReceptorCartaoCP {
		ports ValorPago : Ports.ValorPagOPT {
		}
	}
}
package Connectors {
import SysADL.types;
	import Ports;

	
	connector def RelatorioCNT {
		participants ~ p19 : Ports.RelatorioOPT {
		}
		~ p20 : Ports.RelatorioIPT {
		}
	flows SysADL.types.Relatorio from p19 to p20
	}
	connector def PresencaCNT {
		participants ~ p11 : Ports.PresencaOPT {
		}
		~ p12 : Ports.PresencaIPT {
		}
		flows SysADL.types.Presenca from p11 to p12
	}
	connector def ComCancelaCNT {
		participants ~ p9 : Ports.ComandoCancelaOPT {
		}
		~ p10 : Ports.ComandoCancelaIPT {
		}
		flows 
	SysADL.types.ComandoCancela from p9 to p10
	}
	connector def TicketCNT {
		participants ~ p1 : Ports.TicketOPT {
		}
		~ p2 : Ports.TicketIPT {
		}
		flows 
	SysADL.types.Ticket from p1 to p2
	}
	connector def ValorPagCNT {
		participants ~ p5 : Ports.ValorPagOPT {
		}
		~ p6 : Ports.ValorPagIPT {
		}
		flows 
	SysADL.types.ValorPag from p5 to p6
	}
connector def ConfPagCNT {
		participants ~ p7 : Ports.ConfPagOPT {
		}
		~ p8 : Ports.ConfPagIPT {
		}
		flows SysADL.types.ConfPag from p7 to p8
	}
	connector def CorLedCNT {
		participants ~ p13 : Ports.CorLedOPT {
		}
		~ p14 : Ports.CorLedIPT {
		}
		flows SysADL.types.CorLed from p13 to p14
	}
	connector def QtVagasCNT {
		participants ~ p17 : Ports.QtVagasOPT {
		}
		~ p18 : Ports.QtVagasIPT {
		}
		flows SysADL.types.Int from p17 to p18
	}
	connector def TipoVagaCNT {
		participants ~ p15 : Ports.TipoVagaOPT {
		}
		~ p16 : Ports.TipoVagaIPT {
		}
		flows SysADL.types.TipoVaga from p15 to p16
	}
connector def TipoRelatorioCNT {
		participants ~ p21 : Ports.TipoRelatorioOPT {
		}
		~ p22 : Ports.TipoRelatorioIPT {
		}
		flows SysADL.types.TipoRelatorio from p21 to p22
	}
	connector def DateTimeCNT {
		participants ~ p23 : Ports.DateTimeOPT {
		}
		~ p24 : Ports.DateTimeIPT {
		}
		flows SysADL.types.DateTime from p23 to p24
	}
	connector def LogUsoCNT {
		participants ~ p25 : Ports.LogUsoOPT {
		}
		~ p26 : Ports.LogUsoIPT {
		}
		flows SysADL.types.Log from p25 to p26
	}
connector def ConfImpTicketCNT {
		participants ~ p27 : Ports.ConfImpTicketOPT {
		}
		~ p28 : Ports.ConfImpTicketIPT {
		}
		flows SysADL.types.ConfImpTicket from p27 to p28
	}
connector def TicketToComCancelaCNT {
		participants ~ p1 : Ports.TicketOPT {
		}
		~ p10 : Ports.ComandoCancelaIPT {
		}
		configuration {
		}
		flows SysADL.types.Ticket from p1 to p10
	}
	connector def ConfImpToComCancelaCNT {
		participants ~ p27 : Ports.ConfImpTicketOPT {
		}
		~ p10 : Ports.ComandoCancelaIPT {
		}
		configuration {
		}
		flows SysADL.types.ConfImpTicket from p27 to p10
	}
	connector def CodigoTicketCNT {
		participants ~ p29 : Ports.CodigoTicketOPT {
		}
		~ p31 : Ports.CodigoTicketIPT {
		}
		flows SysADL.types.CodBarras from p29 to p31
	}
connector def VagaCNT {
		participants ~ p32 : Ports.VagaOPT {
		}
		~ p33 : Ports.VagaIPT {
		}
		flows SysADL.types.Vaga from p32 to p33
	}
}
package Ports {
import SysADL.types;
	
	
	port def PresencaIPT {
		flow in SysADL.types.Presenca
	}
	port def PresencaOPT {
		flow out SysADL.types.Presenca
	}
	port def ComandoCancelaIPT {
		flow in SysADL.types.ComandoCancela
	}
	port def ComandoCancelaOPT {
		flow out SysADL.types.ComandoCancela
	}
	port def RelatorioIPT {
		flow in SysADL.types.Relatorio
	}
	port def RelatorioOPT {
		flow out SysADL.types.Relatorio
	}
port def ValorPagIPT {
		flow in SysADL.types.ValorPag
	}
	port def ValorPagOPT {
		flow out SysADL.types.ValorPag
	}
	port def CodigoTicketIPT {
		flow in SysADL.types.CodBarras
	}
	
port def TicketIPT {
		flow in SysADL.types.Ticket
	}
	
	
	port def TicketOPT {
		flow out SysADL.types.Ticket
	}
port def QtVagasIPT {
		flow in SysADL.types.Int
	}
	port def QtVagasOPT {
		flow out SysADL.types.Int
	}
	port def CorLedIPT {
		flow in SysADL.types.CorLed
	}
	port def CorLedOPT {
		flow out SysADL.types.CorLed
	}
port def PagamentoIPT {
		flow in SysADL.types.Dinheiro
	}
	port def ConfPagOPT {
		flow out SysADL.types.ConfPag
	}
	port def ConfPagIPT {
		flow in SysADL.types.ConfPag
	}
	port def TipoVagaIPT {
		flow in SysADL.types.TipoVaga
	}
	port def TipoVagaOPT {
		flow out SysADL.types.TipoVaga
	}
port def TipoRelatorioIPT {
		flow in SysADL.types.TipoRelatorio
	}
	port def TipoRelatorioOPT {
		flow out SysADL.types.TipoRelatorio
	}
	port def DateTimeIPT {
		flow in SysADL.types.DateTime
	}
	port def DateTimeOPT {
		flow out SysADL.types.DateTime
	}
	port def LogUsoIPT {
		flow in SysADL.types.Log
	}
	port def LogUsoOPT {
		flow out SysADL.types.Log
	}
port def ConfImpTicketIPT {
		flow in SysADL.types.ConfImpTicket
	}
	port def ConfImpTicketOPT {
		flow out SysADL.types.ConfImpTicket
	}
port def CodigoTicketOPT {
		flow out SysADL.types.CodBarras
	}
port def VagaIPT {
		flow in SysADL.types.Vaga
	}
	port def VagaOPT {
		flow out SysADL.types.Vaga
	}
port def BooleanIPT {
		flow in SysADL.types.Boolean
	}
	port def BooleanOPT {
		flow in SysADL.types.Boolean
	}
}